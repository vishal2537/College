[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "gurobipy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gurobipy",
        "description": "gurobipy",
        "detail": "gurobipy",
        "documentation": {}
    },
    {
        "label": "GRB",
        "importPath": "gurobipy",
        "description": "gurobipy",
        "isExtraImport": true,
        "detail": "gurobipy",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "z3",
        "description": "z3",
        "isExtraImport": true,
        "detail": "z3",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "z3",
        "description": "z3",
        "isExtraImport": true,
        "detail": "z3",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "z3",
        "description": "z3",
        "isExtraImport": true,
        "detail": "z3",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pulp",
        "description": "pulp",
        "isExtraImport": true,
        "detail": "pulp",
        "documentation": {}
    },
    {
        "label": "copy,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy.",
        "description": "copy.",
        "detail": "copy.",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "SparkContext",
        "importPath": "pyspark",
        "description": "pyspark",
        "isExtraImport": true,
        "detail": "pyspark",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "pyspark.mllib.clustering",
        "description": "pyspark.mllib.clustering",
        "isExtraImport": true,
        "detail": "pyspark.mllib.clustering",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "col",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "col",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "col",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "fetch_ucirepo",
        "importPath": "ucimlrepo",
        "description": "ucimlrepo",
        "isExtraImport": true,
        "detail": "ucimlrepo",
        "documentation": {}
    },
    {
        "label": "fetch_ucirepo",
        "importPath": "ucimlrepo",
        "description": "ucimlrepo",
        "isExtraImport": true,
        "detail": "ucimlrepo",
        "documentation": {}
    },
    {
        "label": "fetch_ucirepo",
        "importPath": "ucimlrepo",
        "description": "ucimlrepo",
        "isExtraImport": true,
        "detail": "ucimlrepo",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "punctuation",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "punctuation",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "punctuation",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "init_pop",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "peekOfCode": "def init_pop(pop_size):\n    matrix=[]\n    for i in range(pop_size):\n        matrix.append(np.random.choice(8,size=(8),replace=False))\n    return np.array(matrix)\ndef calc_fitness(population):\n    fitness_vals=[]\n    for x in population:\n        penalty=0\n        for i in range(8):",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "documentation": {}
    },
    {
        "label": "calc_fitness",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "peekOfCode": "def calc_fitness(population):\n    fitness_vals=[]\n    for x in population:\n        penalty=0\n        for i in range(8):\n            r=x[i]\n            for j in range(8):\n                if i==j:\n                    continue\n                d=abs(i-j)",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "peekOfCode": "def selection(population,fitness_vals):\n    probs = fitness_vals.copy()\n    probs += abs(probs.min())+1\n    probs = probs/probs.sum()\n    N  =  len(population)\n    indices=np.arange(N)\n    selected_indices=np.random.choice(indices,size=N,p=probs)\n    selected_population = population[selected_indices]\n    return selected_population\ndef crossover(parent1,parent2,pc):",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "documentation": {}
    },
    {
        "label": "crossover",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "peekOfCode": "def crossover(parent1,parent2,pc):\n    r=np.random.random()    #0-1\n    if r < pc:\n        m=np.random.randint(1,8)\n        child1=np.concatenate([parent1[:m],parent2[m:]])\n        child2=np.concatenate([parent2[:m],parent1[m:]])\n    else:\n        child1=parent1.copy()\n        child2=parent2.copy() \n    return child1,child2",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "documentation": {}
    },
    {
        "label": "mutation",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "peekOfCode": "def mutation(individual,pm):\n    r=np.random.random()\n    if r< pm:\n        m=np.random.randint(8)\n        individual[m]=np.random.randint(8)\n    return individual\n#apply crossover and mutation to selected pop\ndef crossover_mutation(selected_pop,pc,pm):\n    N=len(selected_pop)\n    new_pop=np.empty((N,8),dtype=int)",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "documentation": {}
    },
    {
        "label": "crossover_mutation",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "peekOfCode": "def crossover_mutation(selected_pop,pc,pm):\n    N=len(selected_pop)\n    new_pop=np.empty((N,8),dtype=int)\n    for i in range(0,N,2):\n        parent1 = selected_pop[i]\n        parent2= selected_pop[i+1]\n        child1,child2 = crossover(parent1,parent2,pc)\n        new_pop[i]=child1\n        new_pop[i+1]=child2\n    for i in range(N):",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "documentation": {}
    },
    {
        "label": "eight_queen",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "peekOfCode": "def eight_queen(pop_size,max_generation,pc=0.7,pm=0.01):\n    num=0\n    population = init_pop(pop_size)\n    print('initial population\\n', population)\n    best_fitness_overall = None\n    best_solution_overall= None\n    for i in range(max_generation):\n        # num+=1\n        fitness_vals = calc_fitness(population)\n        best_i = fitness_vals.argmax()",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.geneticalgo",
        "documentation": {}
    },
    {
        "label": "arr_init",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def arr_init():\n    arr = []\n    n = int(input(\"Enter no. of elements: \"))\n    print(\"Input the array elements\")\n    for i in range(n):\n        x = int(input())\n        arr.append(x)\n    return arr\ndef getNeighbours(subset, arr):\n    neighbours = [[]]",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "getNeighbours",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def getNeighbours(subset, arr):\n    neighbours = [[]]\n    arr_copy = arr.copy()\n    for i in subset:\n        subset_copy = subset.copy()\n        subset_copy.remove(i)\n        neighbours.append(subset_copy)\n        arr_copy.remove(i)\n    for i in arr_copy:\n        subset_copy = subset.copy()",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def f(state, goal):\n    # abs(goal - subset sum) h(n) \n    return abs(goal - sum(state))\ndef g(state):\n    # actual path cost\n    return 0    \ndef goal_test(state, goal):\n    return goal == sum(state)\ndef print_sol(state, goal):\n    if goal_test(state, goal): print('\\nSolved !')",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def g(state):\n    # actual path cost\n    return 0    \ndef goal_test(state, goal):\n    return goal == sum(state)\ndef print_sol(state, goal):\n    if goal_test(state, goal): print('\\nSolved !')\n    print('\\nFinal State:')\n    print(state)\n    return",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "goal_test",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def goal_test(state, goal):\n    return goal == sum(state)\ndef print_sol(state, goal):\n    if goal_test(state, goal): print('\\nSolved !')\n    print('\\nFinal State:')\n    print(state)\n    return\ndef plot(i, evaluation, state, optimum):\n    \"\"\"\n    Plots the resulting evaluation on each iteration.",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "print_sol",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def print_sol(state, goal):\n    if goal_test(state, goal): print('\\nSolved !')\n    print('\\nFinal State:')\n    print(state)\n    return\ndef plot(i, evaluation, state, optimum):\n    \"\"\"\n    Plots the resulting evaluation on each iteration.\n    :param i: Total number of iterations\n    :param evaluation: List of evaluation score",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "plot",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def plot(i, evaluation, state, optimum):\n    \"\"\"\n    Plots the resulting evaluation on each iteration.\n    :param i: Total number of iterations\n    :param evaluation: List of evaluation score\n    :param state: The final state of queens\n    :param optimum: The highest possible score\n    :return:\n    \"\"\"\n    # For results which break the loop in the algorithm",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "random_sol",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def random_sol(arr):\n    solution = []\n    for _ in arr:\n        if random.randint(0,1)==1: solution.append(_)\n    return solution\n# -------------------------------------------------------------------------------------\n# genetic algorithm\ndef fitness(state, arr, goal):\n    subset_sum = 0\n    for i in range(len(arr)):",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "fitness",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def fitness(state, arr, goal):\n    subset_sum = 0\n    for i in range(len(arr)):\n        if state[i]==1: subset_sum += arr[i]\n    return abs(goal - subset_sum)\ndef init_population(arr, n, goal):\n    # bitmask\n    population = []\n    for i in range(n):\n        state = []",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "init_population",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def init_population(arr, n, goal):\n    # bitmask\n    population = []\n    for i in range(n):\n        state = []\n        for i in range(len(arr)):\n            state.append(random.randint(0, 1))\n        population.append(fitness(state), state)\ndef select(population, goal):\n    # roullette wheel slection",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def select(population, goal):\n    # roullette wheel slection\n    new_population  = []\n    prop = []\n    total_fitness =0\n    for i, state in population:\n        total_fitness += i\n    for i in range(len(population)):\n        prop[i] = population[i][0] * len(population) / total_fitness\n    for i in prop:",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "crossover",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def crossover(population, arr, goal):\n    for i in range(1,len(population)):\n        c_point = random.randint(1,len(arr))\n        child1 = [population[i-1][1][:c_point]] + [population[i][1][c_point:]]\n        child2 = [population[i-1][1][c_point:]] + [population[i][1][:c_point]]\n        population[i-1] = child1\n        population[i] = child2\n        i+=1 \n# def mutate(population):\n# -------------------------------------------------------------------------------------------------------",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "hill_climbing",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def hill_climbing(arr, goal):\n    optimum = i = 0\n    cur_v = random_sol(arr)\n    evaluation = []\n    while(i<MAX_ITER):\n        i += 1\n        flag=0\n        print(f\"Iteration {i}: Evaluation = {f(cur_v, goal)} state = {cur_v}\")\n        evaluation.append(f(cur_v, goal))\n        next_v = getNeighbours(cur_v, arr)",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "beam_search",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def beam_search(arr, goal):\n    k = int(input(\"enter value of beta: \"))\n    optimum = i = 0\n    pq =[]\n    cur_v = random_sol(arr)\n    pq.append([f(cur_v, goal), cur_v])\n    heapq.heapify(pq)\n    evaluation = []\n    while(i<MAX_ITER):\n        cur_pq = []",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "def main():\n    x=0\n    arr = arr_init()\n    goal = int(input('enter subset sum: '))\n    while(x!=4):\n        x = int(input('1. Hill Climbing\\n2. Beam Search\\n3. Genetic Algorithm\\n4. Exit\\n'))\n        if x==1: hill_climbing(arr, goal)\n        elif(x==2): beam_search(arr, goal)\n        elif x==3: GA(arr, goal)\n        elif x==4: return",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "MAX_ITER",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "description": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "peekOfCode": "MAX_ITER = 1000\ndef arr_init():\n    arr = []\n    n = int(input(\"Enter no. of elements: \"))\n    print(\"Input the array elements\")\n    for i in range(n):\n        x = int(input())\n        arr.append(x)\n    return arr\ndef getNeighbours(subset, arr):",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-5 Python.subset-sum",
        "documentation": {}
    },
    {
        "label": "MatrixChainOrder",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "peekOfCode": "def MatrixChainOrder(p, i, j):\n\tif i == j:\n\t\treturn 0\n\t_min = sys.maxsize\n\tfor k in range(i, j):\n\t\tcount = (MatrixChainOrder(p, i, k)\n\t\t\t\t+ MatrixChainOrder(p, k + 1, j)\n\t\t\t\t+ p[i-1] * p[k] * p[j])\n\t\tif count < _min:\n\t\t\t_min = count",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "documentation": {}
    },
    {
        "label": "\t_min",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "peekOfCode": "\t_min = sys.maxsize\n\tfor k in range(i, j):\n\t\tcount = (MatrixChainOrder(p, i, k)\n\t\t\t\t+ MatrixChainOrder(p, k + 1, j)\n\t\t\t\t+ p[i-1] * p[k] * p[j])\n\t\tif count < _min:\n\t\t\t_min = count\n\t# Return minimum count\n\treturn _min\n# Driver code",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "documentation": {}
    },
    {
        "label": "\t\tcount",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "peekOfCode": "\t\tcount = (MatrixChainOrder(p, i, k)\n\t\t\t\t+ MatrixChainOrder(p, k + 1, j)\n\t\t\t\t+ p[i-1] * p[k] * p[j])\n\t\tif count < _min:\n\t\t\t_min = count\n\t# Return minimum count\n\treturn _min\n# Driver code\nif __name__ == '__main__':\n\tarr = [1, 2, 3, 4, 3]",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "documentation": {}
    },
    {
        "label": "\t\t\t_min",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "peekOfCode": "\t\t\t_min = count\n\t# Return minimum count\n\treturn _min\n# Driver code\nif __name__ == '__main__':\n\tarr = [1, 2, 3, 4, 3]\n\tN = len(arr)\n\t# Function call\n\tprint(\"Minimum number of multiplications is \",\n\tMatrixChainOrder(arr, 1, N-1))",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "documentation": {}
    },
    {
        "label": "\tarr",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "peekOfCode": "\tarr = [1, 2, 3, 4, 3]\n\tN = len(arr)\n\t# Function call\n\tprint(\"Minimum number of multiplications is \",\n\tMatrixChainOrder(arr, 1, N-1))\n# This code is contributed by Aryan Garg",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "documentation": {}
    },
    {
        "label": "\tN",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "peekOfCode": "\tN = len(arr)\n\t# Function call\n\tprint(\"Minimum number of multiplications is \",\n\tMatrixChainOrder(arr, 1, N-1))\n# This code is contributed by Aryan Garg",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.mcm",
        "documentation": {}
    },
    {
        "label": "TowerOfHanoi",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.toh",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.toh",
        "peekOfCode": "def TowerOfHanoi(n, from_rod, to_rod, aux_rod):\n\tif n == 0:\n\t\treturn\n\tTowerOfHanoi(n-1, from_rod, aux_rod, to_rod)\n\tprint(\"Move disk\", n, \"from rod\", from_rod, \"to rod\", to_rod)\n\tTowerOfHanoi(n-1, aux_rod, to_rod, from_rod)\n# Driver code\nN = 3\n# A, C, B are the name of rods\nTowerOfHanoi(N, 'A', 'C', 'B')",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.toh",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-6 Python.toh",
        "description": "Labs.semester 4.Artificial intelligence.Lab-6 Python.toh",
        "peekOfCode": "N = 3\n# A, C, B are the name of rods\nTowerOfHanoi(N, 'A', 'C', 'B')\n# Contributed By Harshit Agrawal",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-6 Python.toh",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "peekOfCode": "n = 8\nm = gb.Model()\nx = m.addVars(n, n, vtype=gb.GRB.BINARY, name=\"x\")\n# one Queen per row\nm.addConstrs((gb.quicksum(x[i, j] for j in range(n))\n             == 1 for i in range(n)), name=\"rowsum\")\n# one queen per column\nm.addConstrs((gb.quicksum(x[i, j] for i in range(n))\n             == 1 for j in range(n)), name=\"colsum\")\n# no more than one queen per \"/\" diagonal",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "peekOfCode": "m = gb.Model()\nx = m.addVars(n, n, vtype=gb.GRB.BINARY, name=\"x\")\n# one Queen per row\nm.addConstrs((gb.quicksum(x[i, j] for j in range(n))\n             == 1 for i in range(n)), name=\"rowsum\")\n# one queen per column\nm.addConstrs((gb.quicksum(x[i, j] for i in range(n))\n             == 1 for j in range(n)), name=\"colsum\")\n# no more than one queen per \"/\" diagonal\nm.addConstrs(gb.quicksum(x[i, j] for i in range(n) for j in range(",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "peekOfCode": "x = m.addVars(n, n, vtype=gb.GRB.BINARY, name=\"x\")\n# one Queen per row\nm.addConstrs((gb.quicksum(x[i, j] for j in range(n))\n             == 1 for i in range(n)), name=\"rowsum\")\n# one queen per column\nm.addConstrs((gb.quicksum(x[i, j] for i in range(n))\n             == 1 for j in range(n)), name=\"colsum\")\n# no more than one queen per \"/\" diagonal\nm.addConstrs(gb.quicksum(x[i, j] for i in range(n) for j in range(\n    n) if i - j == k) <= 1 for k in range(-n + 2, n - 2 + 1))",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.nQueen.nqueen",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "peekOfCode": "f = open(sys.argv[1])\ngrid = f.read().split()\nn = len(grid[0])\ns = int(math.sqrt(n))\n# Create our 3-D array of model variables\nmodel = gp.Model('sudoku')\nvars = model.addVars(n, n, n, vtype=GRB.BINARY, name='G')\n# Fix variables associated with cells whose values are pre-specified\nfor i in range(n):\n    for j in range(n):",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "peekOfCode": "grid = f.read().split()\nn = len(grid[0])\ns = int(math.sqrt(n))\n# Create our 3-D array of model variables\nmodel = gp.Model('sudoku')\nvars = model.addVars(n, n, n, vtype=GRB.BINARY, name='G')\n# Fix variables associated with cells whose values are pre-specified\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] != '.':",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "peekOfCode": "n = len(grid[0])\ns = int(math.sqrt(n))\n# Create our 3-D array of model variables\nmodel = gp.Model('sudoku')\nvars = model.addVars(n, n, n, vtype=GRB.BINARY, name='G')\n# Fix variables associated with cells whose values are pre-specified\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] != '.':\n            v = int(grid[i][j]) - 1",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "peekOfCode": "s = int(math.sqrt(n))\n# Create our 3-D array of model variables\nmodel = gp.Model('sudoku')\nvars = model.addVars(n, n, n, vtype=GRB.BINARY, name='G')\n# Fix variables associated with cells whose values are pre-specified\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] != '.':\n            v = int(grid[i][j]) - 1\n            vars[i, j, v].LB = 1",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "peekOfCode": "model = gp.Model('sudoku')\nvars = model.addVars(n, n, n, vtype=GRB.BINARY, name='G')\n# Fix variables associated with cells whose values are pre-specified\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] != '.':\n            v = int(grid[i][j]) - 1\n            vars[i, j, v].LB = 1\n# Each cell must take one value\nmodel.addConstrs((vars.sum(i, j, '*') == 1",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "documentation": {}
    },
    {
        "label": "vars",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "peekOfCode": "vars = model.addVars(n, n, n, vtype=GRB.BINARY, name='G')\n# Fix variables associated with cells whose values are pre-specified\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] != '.':\n            v = int(grid[i][j]) - 1\n            vars[i, j, v].LB = 1\n# Each cell must take one value\nmodel.addConstrs((vars.sum(i, j, '*') == 1\n                 for i in range(n)",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "peekOfCode": "solution = model.getAttr('X', vars)\nfor i in range(n):\n    sol = ''\n    for j in range(n):\n        for v in range(n):\n            if solution[i, j, v] > 0.5:\n                sol += str(v+1)\n    print(sol)",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.LpSolver.Sudoku.sudokuLP",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "peekOfCode": "N = 8  # number of queens\n# The variables in the SAT problem are the positions of the queens\n# We number the positions row by row, from left to right,\n# so the variable for the queen in row i and column j is i*N+j+1\n# We use a dictionary to keep track of the variable for each queen\nvariables = {}\nfor i in range(N):\n    for j in range(N):\n        variables[(i, j)] = i*N + j + 1\nclauses = []",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "documentation": {}
    },
    {
        "label": "variables",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "peekOfCode": "variables = {}\nfor i in range(N):\n    for j in range(N):\n        variables[(i, j)] = i*N + j + 1\nclauses = []\n# Constraint 1: Each column must have exactly one queen\nfor i in range(N):\n    clause = []\n    for j in range(N):\n        clause.append(variables[(i, j)])",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "documentation": {}
    },
    {
        "label": "clauses",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "peekOfCode": "clauses = []\n# Constraint 1: Each column must have exactly one queen\nfor i in range(N):\n    clause = []\n    for j in range(N):\n        clause.append(variables[(i, j)])\n    clauses.append(clause)\n    for j in range(N):\n        for k in range(j+1, N):\n            clause = [-variables[(i, j)], -variables[(i, k)]]",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.nQueen.nQueenzchaff",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.Sudoku.zchaffSudoku",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.Sudoku.zchaffSudoku",
        "peekOfCode": "D = 3    # Subgrid dimension\nN = 9  # Grid dimension\nif __name__ == '__main__':\n    # Read the inClauses from the file given as the first argument\n    file_name = sys.argv[1]\n    inClauses = []\n    digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4,\n              '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n    with open(file_name, \"r\") as f:\n        for line in f.readlines():",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.Sudoku.zchaffSudoku",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.Sudoku.zchaffSudoku",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.Sudoku.zchaffSudoku",
        "peekOfCode": "N = 9  # Grid dimension\nif __name__ == '__main__':\n    # Read the inClauses from the file given as the first argument\n    file_name = sys.argv[1]\n    inClauses = []\n    digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4,\n              '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n    with open(file_name, \"r\") as f:\n        for line in f.readlines():\n            assert len(line.strip()) == N, \"'\"+line+\"'\"",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SATSolver.Sudoku.zchaffSudoku",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "peekOfCode": "solver = Solver()\n# Graph\nVERTICES = 5\nEDGES = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 0), (0, 2)]\nCOLORS = 3\nvertices={}\nfor vertice in range(VERTICES):\n    value=Int(f\"{vertice}\")\n    solver.add(And(value >= 1, value <= COLORS))\n    vertices[vertice]=value",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "documentation": {}
    },
    {
        "label": "VERTICES",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "peekOfCode": "VERTICES = 5\nEDGES = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 0), (0, 2)]\nCOLORS = 3\nvertices={}\nfor vertice in range(VERTICES):\n    value=Int(f\"{vertice}\")\n    solver.add(And(value >= 1, value <= COLORS))\n    vertices[vertice]=value\nfor edge in EDGES:\n    solver.add(Distinct([vertices[edge[0]], vertices[edge[1]]]))",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "documentation": {}
    },
    {
        "label": "EDGES",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "peekOfCode": "EDGES = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 0), (0, 2)]\nCOLORS = 3\nvertices={}\nfor vertice in range(VERTICES):\n    value=Int(f\"{vertice}\")\n    solver.add(And(value >= 1, value <= COLORS))\n    vertices[vertice]=value\nfor edge in EDGES:\n    solver.add(Distinct([vertices[edge[0]], vertices[edge[1]]]))\nif solver.check() == sat:",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "peekOfCode": "COLORS = 3\nvertices={}\nfor vertice in range(VERTICES):\n    value=Int(f\"{vertice}\")\n    solver.add(And(value >= 1, value <= COLORS))\n    vertices[vertice]=value\nfor edge in EDGES:\n    solver.add(Distinct([vertices[edge[0]], vertices[edge[1]]]))\nif solver.check() == sat:\n    model = solver.model()",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.GraphColoring.KgraphColoringSMT",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "peekOfCode": "n = 8\n# Create a solver instance\nsolver = Solver()\n# Create 2D array of Boolean variables representing the chess board\nboard = [[Bool(f\"{i} {j}\") for j in range(n)] for i in range(n)]\n# Add constraints that only one queen can be placed in each row\nfor i in range(n):\n    solver.add(Or([board[i][j] for j in range(n)]))\n    solver.add(AtMost(*[board[i][j] for j in range(n)], 1))\n# Add constraints that only one queen can be placed in each column",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "peekOfCode": "solver = Solver()\n# Create 2D array of Boolean variables representing the chess board\nboard = [[Bool(f\"{i} {j}\") for j in range(n)] for i in range(n)]\n# Add constraints that only one queen can be placed in each row\nfor i in range(n):\n    solver.add(Or([board[i][j] for j in range(n)]))\n    solver.add(AtMost(*[board[i][j] for j in range(n)], 1))\n# Add constraints that only one queen can be placed in each column\nfor j in range(n):\n    solver.add(Or([board[i][j] for i in range(n)]))",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "peekOfCode": "board = [[Bool(f\"{i} {j}\") for j in range(n)] for i in range(n)]\n# Add constraints that only one queen can be placed in each row\nfor i in range(n):\n    solver.add(Or([board[i][j] for j in range(n)]))\n    solver.add(AtMost(*[board[i][j] for j in range(n)], 1))\n# Add constraints that only one queen can be placed in each column\nfor j in range(n):\n    solver.add(Or([board[i][j] for i in range(n)]))\n    solver.add(AtMost(*[board[i][j] for i in range(n)], 1))\n# Add constraints that only one queen can be placed in each diagonal",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.nQueen.nqueenSMTsolver",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "peekOfCode": "N = 9\nD = 3\n# Create a solver instance\nsolver = Solver()\n# Create 2D array of integer variables representing the sudoku board\ninputBoard = [[0, 0, 3, 0, 2, 0, 6, 0, 0],\n              [9, 0, 0, 3, 0, 5, 0, 0, 1],\n              [0, 0, 1, 8, 0, 6, 4, 0, 0],\n              [0, 0, 8, 1, 0, 2, 9, 0, 0],\n              [7, 0, 0, 0, 0, 0, 0, 0, 8],",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "peekOfCode": "D = 3\n# Create a solver instance\nsolver = Solver()\n# Create 2D array of integer variables representing the sudoku board\ninputBoard = [[0, 0, 3, 0, 2, 0, 6, 0, 0],\n              [9, 0, 0, 3, 0, 5, 0, 0, 1],\n              [0, 0, 1, 8, 0, 6, 4, 0, 0],\n              [0, 0, 8, 1, 0, 2, 9, 0, 0],\n              [7, 0, 0, 0, 0, 0, 0, 0, 8],\n              [0, 0, 6, 7, 0, 8, 2, 0, 0],",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "peekOfCode": "solver = Solver()\n# Create 2D array of integer variables representing the sudoku board\ninputBoard = [[0, 0, 3, 0, 2, 0, 6, 0, 0],\n              [9, 0, 0, 3, 0, 5, 0, 0, 1],\n              [0, 0, 1, 8, 0, 6, 4, 0, 0],\n              [0, 0, 8, 1, 0, 2, 9, 0, 0],\n              [7, 0, 0, 0, 0, 0, 0, 0, 8],\n              [0, 0, 6, 7, 0, 8, 2, 0, 0],\n              [0, 0, 2, 6, 0, 9, 5, 0, 0],\n              [8, 0, 0, 2, 0, 3, 0, 0, 9],",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "documentation": {}
    },
    {
        "label": "inputBoard",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "peekOfCode": "inputBoard = [[0, 0, 3, 0, 2, 0, 6, 0, 0],\n              [9, 0, 0, 3, 0, 5, 0, 0, 1],\n              [0, 0, 1, 8, 0, 6, 4, 0, 0],\n              [0, 0, 8, 1, 0, 2, 9, 0, 0],\n              [7, 0, 0, 0, 0, 0, 0, 0, 8],\n              [0, 0, 6, 7, 0, 8, 2, 0, 0],\n              [0, 0, 2, 6, 0, 9, 5, 0, 0],\n              [8, 0, 0, 2, 0, 3, 0, 0, 9],\n              [0, 0, 5, 0, 1, 0, 3, 0, 0]]\nboard = []",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "description": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "peekOfCode": "board = []\nfor i in range(N):\n    col = []\n    for j in range(N):\n        value = Int(f\"{i} {j}\")\n        if inputBoard[i][j] != 0:\n            solver.add(value == inputBoard[i][j])\n        else:\n            solver.add(And(value >= 1, value <= N))\n        col.append(value)",
        "detail": "Labs.semester 4.Artificial intelligence.Lab-7 Python.SMTSolver.Sudoku.sudokuSMT",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "model = gp.Model()\n# Define the decision variables\nx1 = model.addVar(vtype=gp.GRB.BINARY, name=\"x1\")\nx2 = model.addVar(vtype=gp.GRB.BINARY, name=\"x2\")\nx3 = model.addVar(vtype=gp.GRB.BINARY, name=\"x3\")\nx4 = model.addVar(vtype=gp.GRB.BINARY, name=\"x4\")\nx5 = model.addVar(vtype=gp.GRB.BINARY, name=\"x5\")\nx6 = model.addVar(vtype=gp.GRB.BINARY, name=\"x6\")\nvariables = {}\nvariables[1] = x1",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "x1 = model.addVar(vtype=gp.GRB.BINARY, name=\"x1\")\nx2 = model.addVar(vtype=gp.GRB.BINARY, name=\"x2\")\nx3 = model.addVar(vtype=gp.GRB.BINARY, name=\"x3\")\nx4 = model.addVar(vtype=gp.GRB.BINARY, name=\"x4\")\nx5 = model.addVar(vtype=gp.GRB.BINARY, name=\"x5\")\nx6 = model.addVar(vtype=gp.GRB.BINARY, name=\"x6\")\nvariables = {}\nvariables[1] = x1\nvariables[2] = x2\nvariables[3] = x3",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "x2 = model.addVar(vtype=gp.GRB.BINARY, name=\"x2\")\nx3 = model.addVar(vtype=gp.GRB.BINARY, name=\"x3\")\nx4 = model.addVar(vtype=gp.GRB.BINARY, name=\"x4\")\nx5 = model.addVar(vtype=gp.GRB.BINARY, name=\"x5\")\nx6 = model.addVar(vtype=gp.GRB.BINARY, name=\"x6\")\nvariables = {}\nvariables[1] = x1\nvariables[2] = x2\nvariables[3] = x3\nvariables[4] = x4",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "x3",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "x3 = model.addVar(vtype=gp.GRB.BINARY, name=\"x3\")\nx4 = model.addVar(vtype=gp.GRB.BINARY, name=\"x4\")\nx5 = model.addVar(vtype=gp.GRB.BINARY, name=\"x5\")\nx6 = model.addVar(vtype=gp.GRB.BINARY, name=\"x6\")\nvariables = {}\nvariables[1] = x1\nvariables[2] = x2\nvariables[3] = x3\nvariables[4] = x4\nvariables[5] = x5",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "x4",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "x4 = model.addVar(vtype=gp.GRB.BINARY, name=\"x4\")\nx5 = model.addVar(vtype=gp.GRB.BINARY, name=\"x5\")\nx6 = model.addVar(vtype=gp.GRB.BINARY, name=\"x6\")\nvariables = {}\nvariables[1] = x1\nvariables[2] = x2\nvariables[3] = x3\nvariables[4] = x4\nvariables[5] = x5\nvariables[6] = x6",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "x5",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "x5 = model.addVar(vtype=gp.GRB.BINARY, name=\"x5\")\nx6 = model.addVar(vtype=gp.GRB.BINARY, name=\"x6\")\nvariables = {}\nvariables[1] = x1\nvariables[2] = x2\nvariables[3] = x3\nvariables[4] = x4\nvariables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "x6",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "x6 = model.addVar(vtype=gp.GRB.BINARY, name=\"x6\")\nvariables = {}\nvariables[1] = x1\nvariables[2] = x2\nvariables[3] = x3\nvariables[4] = x4\nvariables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "variables",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "variables = {}\nvariables[1] = x1\nvariables[2] = x2\nvariables[3] = x3\nvariables[4] = x4\nvariables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "variables[1]",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "variables[1] = x1\nvariables[2] = x2\nvariables[3] = x3\nvariables[4] = x4\nvariables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints\nfor clause in listOfClauses:",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "variables[2]",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "variables[2] = x2\nvariables[3] = x3\nvariables[4] = x4\nvariables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints\nfor clause in listOfClauses:\n    clause_vars = []",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "variables[3]",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "variables[3] = x3\nvariables[4] = x4\nvariables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints\nfor clause in listOfClauses:\n    clause_vars = []\n    for value in clause:",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "variables[4]",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "variables[4] = x4\nvariables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints\nfor clause in listOfClauses:\n    clause_vars = []\n    for value in clause:\n        if value > 0:",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "variables[5]",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "variables[5] = x5\nvariables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints\nfor clause in listOfClauses:\n    clause_vars = []\n    for value in clause:\n        if value > 0:\n            clause_vars.append(variables[value])",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "variables[6]",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "variables[6] = x6\nlistOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints\nfor clause in listOfClauses:\n    clause_vars = []\n    for value in clause:\n        if value > 0:\n            clause_vars.append(variables[value])\n        else:",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "listOfClauses",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "peekOfCode": "listOfClauses = [[-1, -2, 3], [2, -3, -4], [-2, 3, -4], [3, -4, 5], [1, 5, -6]]\n# Define the constraints\n# Define the constraints\nfor clause in listOfClauses:\n    clause_vars = []\n    for value in clause:\n        if value > 0:\n            clause_vars.append(variables[value])\n        else:\n            clause_vars.append(1 - variables[abs(value)])",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q1",
        "documentation": {}
    },
    {
        "label": "clauses",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "peekOfCode": "clauses = []\n# first Clause\nclause = []\nclause.append(-1)\nclause.append(-2)\nclause.append(3)\nclauses.append(clause)\n# second Clause\nclause = []\nclause.append(2)",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "documentation": {}
    },
    {
        "label": "clause",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "peekOfCode": "clause = []\nclause.append(-1)\nclause.append(-2)\nclause.append(3)\nclauses.append(clause)\n# second Clause\nclause = []\nclause.append(2)\nclause.append(-3)\nclause.append(-4)",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "documentation": {}
    },
    {
        "label": "clause",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "peekOfCode": "clause = []\nclause.append(2)\nclause.append(-3)\nclause.append(-4)\nclauses.append(clause)\n# third Clause\nclause = []\nclause.append(-2)\nclause.append(3)\nclause.append(-4)",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "documentation": {}
    },
    {
        "label": "clause",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "peekOfCode": "clause = []\nclause.append(-2)\nclause.append(3)\nclause.append(-4)\nclauses.append(clause)\n# fourth Clause\nclause = []\nclause.append(3)\nclause.append(-4)\nclause.append(5)",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "documentation": {}
    },
    {
        "label": "clause",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "peekOfCode": "clause = []\nclause.append(3)\nclause.append(-4)\nclause.append(5)\nclauses.append(clause)\n# fifth Clause\nclause = []\nclause.append(1)\nclause.append(5)\nclause.append(-6)",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "documentation": {}
    },
    {
        "label": "clause",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "peekOfCode": "clause = []\nclause.append(1)\nclause.append(5)\nclause.append(-6)\nclauses.append(clause)\nwith open(\"output.txt\", \"w\") as f:\n    f.write(\"p cnf {} {}\\n\".format(6, len(clauses)))\n    for clause in clauses:\n        f.write(\" \".join(str(x) for x in clause) + \" 0\\n\")",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.Lab4Q1SAT",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "peekOfCode": "tasks = ['A', 'B', 'C', 'D']\nagents = [1, 2, 3, 4]\nx = LpVariable.dicts('x', [(i, j) for i in tasks for j in agents], cat='Binary')\n# Define the objective function\nprob = LpProblem('Task Assignment', LpMaximize)\nprob += lpSum([10*x[('A', 1)] + 12*x[('A', 2)] + 19*x[('A', 3)] + 11*x[('A', 4)] +\n               5*x[('B', 1)] + 10*x[('B', 2)] + 7*x[('B', 3)] + 8*x[('B', 4)] +\n               12*x[('C', 1)] + 14*x[('C', 2)] + 13*x[('C', 3)] + 11*x[('C', 4)] +\n               8*x[('D', 1)] + 15*x[('D', 2)] + 11*x[('D', 3)] + 9*x[('D', 4)]  ])\n# Define the constraints",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "documentation": {}
    },
    {
        "label": "agents",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "peekOfCode": "agents = [1, 2, 3, 4]\nx = LpVariable.dicts('x', [(i, j) for i in tasks for j in agents], cat='Binary')\n# Define the objective function\nprob = LpProblem('Task Assignment', LpMaximize)\nprob += lpSum([10*x[('A', 1)] + 12*x[('A', 2)] + 19*x[('A', 3)] + 11*x[('A', 4)] +\n               5*x[('B', 1)] + 10*x[('B', 2)] + 7*x[('B', 3)] + 8*x[('B', 4)] +\n               12*x[('C', 1)] + 14*x[('C', 2)] + 13*x[('C', 3)] + 11*x[('C', 4)] +\n               8*x[('D', 1)] + 15*x[('D', 2)] + 11*x[('D', 3)] + 9*x[('D', 4)]  ])\n# Define the constraints\nfor i in tasks:",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "peekOfCode": "x = LpVariable.dicts('x', [(i, j) for i in tasks for j in agents], cat='Binary')\n# Define the objective function\nprob = LpProblem('Task Assignment', LpMaximize)\nprob += lpSum([10*x[('A', 1)] + 12*x[('A', 2)] + 19*x[('A', 3)] + 11*x[('A', 4)] +\n               5*x[('B', 1)] + 10*x[('B', 2)] + 7*x[('B', 3)] + 8*x[('B', 4)] +\n               12*x[('C', 1)] + 14*x[('C', 2)] + 13*x[('C', 3)] + 11*x[('C', 4)] +\n               8*x[('D', 1)] + 15*x[('D', 2)] + 11*x[('D', 3)] + 9*x[('D', 4)]  ])\n# Define the constraints\nfor i in tasks:\n    prob += lpSum([x[(i, j)] for j in agents]) == 1  #ensures that each task is assigned to exactly one agent.",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "documentation": {}
    },
    {
        "label": "prob",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "peekOfCode": "prob = LpProblem('Task Assignment', LpMaximize)\nprob += lpSum([10*x[('A', 1)] + 12*x[('A', 2)] + 19*x[('A', 3)] + 11*x[('A', 4)] +\n               5*x[('B', 1)] + 10*x[('B', 2)] + 7*x[('B', 3)] + 8*x[('B', 4)] +\n               12*x[('C', 1)] + 14*x[('C', 2)] + 13*x[('C', 3)] + 11*x[('C', 4)] +\n               8*x[('D', 1)] + 15*x[('D', 2)] + 11*x[('D', 3)] + 9*x[('D', 4)]  ])\n# Define the constraints\nfor i in tasks:\n    prob += lpSum([x[(i, j)] for j in agents]) == 1  #ensures that each task is assigned to exactly one agent.\nfor j in agents:\n    prob += lpSum([x[(i, j)] for i in tasks]) <= 1   #each agent is assigned at most one task",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.Lab4_1.lab4Q2",
        "documentation": {}
    },
    {
        "label": "minimax",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.minimax",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.minimax",
        "peekOfCode": "def minimax(game_state, maximizing, depth):\n    \"\"\"\n    This function implements the minimax algorithm to determine the best move\n    for the current player at the given game state.\n    \"\"\"\n    if depth == 0 or game_state == 0:\n        # If we've reached the maximum depth or the game is over, return the score.\n        return (game_state, None)\n    # Determine the other player.\n    other_player = 1 if player == 2 else 2",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.minimax",
        "documentation": {}
    },
    {
        "label": "manhattan",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "def manhattan(state, goal):\n    heuristic = 0\n    for i in range(len(state)):\n        for j in range(len(state)):\n            row, col = find(goal, state[i][j])\n            if row != -1:\n                heuristic += abs(row - i) + abs(col - j)\n            else:\n                heuristic += 9999\n    return heuristic",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "misplaced",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "def misplaced(state, goal):\n    heuristic = 0\n    for i in range(len(state)):\n        for j in range(len(state)):\n            if state[i][j] != goal[i][j] and state[i][j] != 0:\n                heuristic += 1\n    return heuristic\ndef find(state, x):\n    for i in range(len(state)):\n        for j in range(len(state)):",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "find",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "def find(state, x):\n    for i in range(len(state)):\n        for j in range(len(state)):\n            if state[i][j] == x:\n                return i, j\n    return -1, -1\ndef switch(row1, col1, row2, col2, state):\n    temp = state[row1][col1]\n    state[row1][col1] = state[row2][col2]\n    state[row2][col2] = temp",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "switch",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "def switch(row1, col1, row2, col2, state):\n    temp = state[row1][col1]\n    state[row1][col1] = state[row2][col2]\n    state[row2][col2] = temp\n    return state\ndef getNeighbour(state):\n    ret = []\n    row, col = find(state, 0)\n    if row > 0:\n        oneUp = switch(row, col, row - 1, col, copy.deepcopy(state))",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "getNeighbour",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "def getNeighbour(state):\n    ret = []\n    row, col = find(state, 0)\n    if row > 0:\n        oneUp = switch(row, col, row - 1, col, copy.deepcopy(state))\n        ret.append(oneUp)\n    if row < 2:\n        oneDown = switch(row, col, row + 1, col, copy.deepcopy(state))\n        ret.append(oneDown)\n    if col > 0:",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "isEqual",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "def isEqual(state1, state2):\n    for i in range(len(state1)):\n        for j in range(len(state1)):\n            if state1[i][j] != state2[i][j]:\n                return False\n    return True\ndef aStar(states, goal, cost):\n    closed = []\n    while states:\n        current = states.pop(0)",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "aStar",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "def aStar(states, goal, cost):\n    closed = []\n    while states:\n        current = states.pop(0)\n        neighbours = getNeighbour(current[1])\n        cost += 1\n        for i in neighbours:\n            total = 0\n            if isEqual(i, goal):\n                closed.append((cost, i))",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "goal",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "goal = [[2, 3, 4, 0], [1, 6, 7, 8], [5, 10, 11, 12], [9, 13, 14, 15]]\ninitial = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]]\nclosed = []\ncost = 0\nstates = []\nstates.append((misplaced(initial, goal), initial))\nprint(aStar(states, goal, cost))",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "initial",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "initial = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]]\nclosed = []\ncost = 0\nstates = []\nstates.append((misplaced(initial, goal), initial))\nprint(aStar(states, goal, cost))",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "closed",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "closed = []\ncost = 0\nstates = []\nstates.append((misplaced(initial, goal), initial))\nprint(aStar(states, goal, cost))",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "cost",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "cost = 0\nstates = []\nstates.append((misplaced(initial, goal), initial))\nprint(aStar(states, goal, cost))",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "states",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "peekOfCode": "states = []\nstates.append((misplaced(initial, goal), initial))\nprint(aStar(states, goal, cost))",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.que",
        "documentation": {}
    },
    {
        "label": "toggleTurn",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "peekOfCode": "def toggleTurn(player):\n    if player == 1:\n        return 2\n    else:\n        return 1\ndef minimax(noOfSticks, maximizing, depth, alpha=float(\"-inf\"), beta=float(\"inf\")):\n    if depth == 0 or noOfSticks == 0:\n        # If we've reached the maximum depth or the game is over, return the score.\n        return (noOfSticks, None)\n    # Generate all possible moves.",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "documentation": {}
    },
    {
        "label": "minimax",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "peekOfCode": "def minimax(noOfSticks, maximizing, depth, alpha=float(\"-inf\"), beta=float(\"inf\")):\n    if depth == 0 or noOfSticks == 0:\n        # If we've reached the maximum depth or the game is over, return the score.\n        return (noOfSticks, None)\n    # Generate all possible moves.\n    possible_moves = []\n    for i in range(1, 4):\n        if noOfSticks >= i:\n            possible_moves.append(i)\n    # If there are no possible moves, the other player wins.",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "documentation": {}
    },
    {
        "label": "playGame",
        "kind": 2,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "peekOfCode": "def playGame(noOfSticks, noOfPlayer):\n    if (noOfPlayer == 1):\n        # player-1 is human\n        # player-2 is computer\n        current_player = 1\n        if current_player == 1:\n            print(\"You Won the toss!\")\n        else:\n            print(\"Computer Won the toss!\")\n        while noOfSticks > 0:",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "documentation": {}
    },
    {
        "label": "noOfSticks",
        "kind": 5,
        "importPath": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "description": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "peekOfCode": "noOfSticks = int(input(\"Enter Number Of Sticks : \"))\nplayGame(noOfSticks, 1)",
        "detail": "Labs.semester 4.Artificial intelligence.LabExam.third",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "peekOfCode": "filename = 'adult.data'\ndata = pd.read_csv(filename, header=None)\nX = data[[0, 2, 11]].copy()\nkmeans = KMeans(n_clusters=3 ,max_iter=500, random_state=10).fit(X)\nprint(\"Cluster Centers :\", kmeans.cluster_centers_)\nprint(\"Sum Squared Error :\",kmeans.inertia_)\n# 0 --> age\n# 2 --> work class\n# 11 --> capital-loss",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "peekOfCode": "data = pd.read_csv(filename, header=None)\nX = data[[0, 2, 11]].copy()\nkmeans = KMeans(n_clusters=3 ,max_iter=500, random_state=10).fit(X)\nprint(\"Cluster Centers :\", kmeans.cluster_centers_)\nprint(\"Sum Squared Error :\",kmeans.inertia_)\n# 0 --> age\n# 2 --> work class\n# 11 --> capital-loss",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "peekOfCode": "X = data[[0, 2, 11]].copy()\nkmeans = KMeans(n_clusters=3 ,max_iter=500, random_state=10).fit(X)\nprint(\"Cluster Centers :\", kmeans.cluster_centers_)\nprint(\"Sum Squared Error :\",kmeans.inertia_)\n# 0 --> age\n# 2 --> work class\n# 11 --> capital-loss",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "documentation": {}
    },
    {
        "label": "kmeans",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "peekOfCode": "kmeans = KMeans(n_clusters=3 ,max_iter=500, random_state=10).fit(X)\nprint(\"Cluster Centers :\", kmeans.cluster_centers_)\nprint(\"Sum Squared Error :\",kmeans.inertia_)\n# 0 --> age\n# 2 --> work class\n# 11 --> capital-loss",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q1_kmean_clustering",
        "documentation": {}
    },
    {
        "label": "cost",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q2_spark_clustering",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q2_spark_clustering",
        "peekOfCode": "def cost(point):\n    center = clusters.centers[clusters.predict(point)]\n    return sqrt(sum([x**2 for x in (point - center)]))\nif __name__ == \"__main__\":\n    spark = SparkContext(appName=\"KMeansExample\")\n    data = spark.textFile(\"file:///home/devil/it-workshop/2101227_Lab10/adultdata.txt\")\n    dataset = data.map(lambda line: np.array([x for x in line.split(', ')])[np.array([0,2,11])].astype(float))\n    clusters = KMeans.train(dataset, 3, maxIterations=50, initializationMode=\"random\")\n    SSE = dataset.map(lambda point: cost(point)).reduce(lambda x, y: x + y)\n    print(\"\\nCenters:\",clusters.centers,\"\\nSSE=\",SSE,\"\\n\",file=sys.stdout)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q2_spark_clustering",
        "documentation": {}
    },
    {
        "label": "spark",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "spark = SparkSession.builder.appName(\"CountryAnalysis\").getOrCreate()\nfrom ucimlrepo import fetch_ucirepo\nadult = fetch_ucirepo(id=2)\ndata = adult.data.features\ndf = spark.createDataFrame(data)\nusa = df.filter(df[\"native-country\"] != \"United-States\")\nadults = usa.filter(df[\"age\"] > 18)\ncount_country = adults.groupBy(\"native-country\").agg({\"age\": \"count\"})\nmax_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "adult",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "adult = fetch_ucirepo(id=2)\ndata = adult.data.features\ndf = spark.createDataFrame(data)\nusa = df.filter(df[\"native-country\"] != \"United-States\")\nadults = usa.filter(df[\"age\"] > 18)\ncount_country = adults.groupBy(\"native-country\").agg({\"age\": \"count\"})\nmax_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nCountry with the highest number of adults (excluding USA):\", max_count_row[\"native-country\"], \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "data = adult.data.features\ndf = spark.createDataFrame(data)\nusa = df.filter(df[\"native-country\"] != \"United-States\")\nadults = usa.filter(df[\"age\"] > 18)\ncount_country = adults.groupBy(\"native-country\").agg({\"age\": \"count\"})\nmax_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nCountry with the highest number of adults (excluding USA):\", max_count_row[\"native-country\"], \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "df = spark.createDataFrame(data)\nusa = df.filter(df[\"native-country\"] != \"United-States\")\nadults = usa.filter(df[\"age\"] > 18)\ncount_country = adults.groupBy(\"native-country\").agg({\"age\": \"count\"})\nmax_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nCountry with the highest number of adults (excluding USA):\", max_count_row[\"native-country\"], \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "usa",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "usa = df.filter(df[\"native-country\"] != \"United-States\")\nadults = usa.filter(df[\"age\"] > 18)\ncount_country = adults.groupBy(\"native-country\").agg({\"age\": \"count\"})\nmax_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nCountry with the highest number of adults (excluding USA):\", max_count_row[\"native-country\"], \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "adults",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "adults = usa.filter(df[\"age\"] > 18)\ncount_country = adults.groupBy(\"native-country\").agg({\"age\": \"count\"})\nmax_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nCountry with the highest number of adults (excluding USA):\", max_count_row[\"native-country\"], \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "count_country",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "count_country = adults.groupBy(\"native-country\").agg({\"age\": \"count\"})\nmax_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nCountry with the highest number of adults (excluding USA):\", max_count_row[\"native-country\"], \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "max_count_row",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "peekOfCode": "max_count_row = count_country.orderBy(col(\"count(age)\").desc()).first()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nCountry with the highest number of adults (excluding USA):\", max_count_row[\"native-country\"], \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_1",
        "documentation": {}
    },
    {
        "label": "spark",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "peekOfCode": "spark = SparkSession.builder.appName(\"CountryAnalysis\").getOrCreate()\nfrom ucimlrepo import fetch_ucirepo\nadult = fetch_ucirepo(id=2)\ndata = adult.data.features\ndf = spark.createDataFrame(data)\natleast_masters = df.filter((df[\"education\"] == \"Masters\") | (df[\"education\"] == \"Doctorate\"))\ntech_support = atleast_masters.filter(atleast_masters[\"occupation\"] == \"Tech-support\")\ncount = tech_support.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of people with at least a Masters or Doctorate degree working in Tech-support:\", count, \"\\n\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "documentation": {}
    },
    {
        "label": "adult",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "peekOfCode": "adult = fetch_ucirepo(id=2)\ndata = adult.data.features\ndf = spark.createDataFrame(data)\natleast_masters = df.filter((df[\"education\"] == \"Masters\") | (df[\"education\"] == \"Doctorate\"))\ntech_support = atleast_masters.filter(atleast_masters[\"occupation\"] == \"Tech-support\")\ncount = tech_support.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of people with at least a Masters or Doctorate degree working in Tech-support:\", count, \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "peekOfCode": "data = adult.data.features\ndf = spark.createDataFrame(data)\natleast_masters = df.filter((df[\"education\"] == \"Masters\") | (df[\"education\"] == \"Doctorate\"))\ntech_support = atleast_masters.filter(atleast_masters[\"occupation\"] == \"Tech-support\")\ncount = tech_support.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of people with at least a Masters or Doctorate degree working in Tech-support:\", count, \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "peekOfCode": "df = spark.createDataFrame(data)\natleast_masters = df.filter((df[\"education\"] == \"Masters\") | (df[\"education\"] == \"Doctorate\"))\ntech_support = atleast_masters.filter(atleast_masters[\"occupation\"] == \"Tech-support\")\ncount = tech_support.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of people with at least a Masters or Doctorate degree working in Tech-support:\", count, \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "documentation": {}
    },
    {
        "label": "atleast_masters",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "peekOfCode": "atleast_masters = df.filter((df[\"education\"] == \"Masters\") | (df[\"education\"] == \"Doctorate\"))\ntech_support = atleast_masters.filter(atleast_masters[\"occupation\"] == \"Tech-support\")\ncount = tech_support.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of people with at least a Masters or Doctorate degree working in Tech-support:\", count, \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "documentation": {}
    },
    {
        "label": "tech_support",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "peekOfCode": "tech_support = atleast_masters.filter(atleast_masters[\"occupation\"] == \"Tech-support\")\ncount = tech_support.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of people with at least a Masters or Doctorate degree working in Tech-support:\", count, \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "peekOfCode": "count = tech_support.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of people with at least a Masters or Doctorate degree working in Tech-support:\", count, \"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_2",
        "documentation": {}
    },
    {
        "label": "spark",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "spark = SparkSession.builder.appName(\"CountryAnalysis\").getOrCreate()\nfrom ucimlrepo import fetch_ucirepo\nadult = fetch_ucirepo(id=2)\ndata = adult.data.features\ndf = spark.createDataFrame(data)\nunmarried = df.filter((df[\"marital-status\"] == \"Divorced\") | (df[\"marital-status\"] == \"Never-married\"))\nmales = unmarried.filter(unmarried[\"sex\"] == \"Male\")\nlocal_govt = males.filter(males[\"workclass\"] == \"Local-gov\")\ncount = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "adult",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "adult = fetch_ucirepo(id=2)\ndata = adult.data.features\ndf = spark.createDataFrame(data)\nunmarried = df.filter((df[\"marital-status\"] == \"Divorced\") | (df[\"marital-status\"] == \"Never-married\"))\nmales = unmarried.filter(unmarried[\"sex\"] == \"Male\")\nlocal_govt = males.filter(males[\"workclass\"] == \"Local-gov\")\ncount = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of unmarried males working in Local-govt:\", count,\"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "data = adult.data.features\ndf = spark.createDataFrame(data)\nunmarried = df.filter((df[\"marital-status\"] == \"Divorced\") | (df[\"marital-status\"] == \"Never-married\"))\nmales = unmarried.filter(unmarried[\"sex\"] == \"Male\")\nlocal_govt = males.filter(males[\"workclass\"] == \"Local-gov\")\ncount = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of unmarried males working in Local-govt:\", count,\"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "df = spark.createDataFrame(data)\nunmarried = df.filter((df[\"marital-status\"] == \"Divorced\") | (df[\"marital-status\"] == \"Never-married\"))\nmales = unmarried.filter(unmarried[\"sex\"] == \"Male\")\nlocal_govt = males.filter(males[\"workclass\"] == \"Local-gov\")\ncount = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of unmarried males working in Local-govt:\", count,\"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "unmarried",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "unmarried = df.filter((df[\"marital-status\"] == \"Divorced\") | (df[\"marital-status\"] == \"Never-married\"))\nmales = unmarried.filter(unmarried[\"sex\"] == \"Male\")\nlocal_govt = males.filter(males[\"workclass\"] == \"Local-gov\")\ncount = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of unmarried males working in Local-govt:\", count,\"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "males",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "males = unmarried.filter(unmarried[\"sex\"] == \"Male\")\nlocal_govt = males.filter(males[\"workclass\"] == \"Local-gov\")\ncount = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of unmarried males working in Local-govt:\", count,\"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "local_govt",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "local_govt = males.filter(males[\"workclass\"] == \"Local-gov\")\ncount = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of unmarried males working in Local-govt:\", count,\"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "peekOfCode": "count = local_govt.count()\nprint(\"------------------------------------------------------------------------------------------------\")\nprint(\"\\nNumber of unmarried males working in Local-govt:\", count,\"\\n\")\nprint(\"------------------------------------------------------------------------------------------------\")\nspark.stop()",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab10.Q3_3",
        "documentation": {}
    },
    {
        "label": "s3_bucket_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "s3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\n# Initialize AWS clients\nec2_client = boto3.client('ec2')\ns3_client = boto3.client('s3')\n# startup script\nstartup_script = '''#!/bin/bash\nsudo yum install httpd -y",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "security_group_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "security_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\n# Initialize AWS clients\nec2_client = boto3.client('ec2')\ns3_client = boto3.client('s3')\n# startup script\nstartup_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "instance_key_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "instance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\n# Initialize AWS clients\nec2_client = boto3.client('ec2')\ns3_client = boto3.client('s3')\n# startup script\nstartup_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "ec2_role_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "ec2_role_name = 'Devil'      # s3 Access Role\n# Initialize AWS clients\nec2_client = boto3.client('ec2')\ns3_client = boto3.client('s3')\n# startup script\nstartup_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/\n'''",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "ec2_client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "ec2_client = boto3.client('ec2')\ns3_client = boto3.client('s3')\n# startup script\nstartup_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/\n'''\n# Start an EC2 instance\ninstance = ec2_client.run_instances(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "s3_client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "s3_client = boto3.client('s3')\n# startup script\nstartup_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/\n'''\n# Start an EC2 instance\ninstance = ec2_client.run_instances(\n    ImageId='ami-0ded8326293d3201b',  # Replace with a valid AMI ID",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "startup_script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "startup_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/\n'''\n# Start an EC2 instance\ninstance = ec2_client.run_instances(\n    ImageId='ami-0ded8326293d3201b',  # Replace with a valid AMI ID\n    InstanceType='t2.micro',\n    KeyName=instance_key_name,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "instance",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "instance = ec2_client.run_instances(\n    ImageId='ami-0ded8326293d3201b',  # Replace with a valid AMI ID\n    InstanceType='t2.micro',\n    KeyName=instance_key_name,\n    SecurityGroups=[security_group_name],\n    MaxCount=1,\n    MinCount=1,\n    IamInstanceProfile={\n        'Name': ec2_role_name\n    },",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "instance_id",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "instance_id = instance['Instances'][0]['InstanceId']\n# Instance is running\nwhile True:\n    instance_info = ec2_client.describe_instances(InstanceIds=[instance_id])\n    instance_state = instance_info['Reservations'][0]['Instances'][0]['State']['Name']\n    if instance_state == 'running':\n        break\n    time.sleep(3)\n# Public DNS of the instance\npublic_dns = instance_info['Reservations'][0]['Instances'][0]['PublicDnsName']",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "public_dns",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "peekOfCode": "public_dns = instance_info['Reservations'][0]['Instances'][0]['PublicDnsName']\nprint(\"INSTANCE NOW RUNNING.\\nPUBLIC DNS:\", public_dns)\n# Open public DNS in a browser\nprint(\"WEBSITE URL IS : \")\nprint(\"http://\" + public_dns)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab2.q",
        "documentation": {}
    },
    {
        "label": "launch_instance",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "def launch_instance(instance_type='t2.micro', ami_id='ami-0ded8326293d3201b'):\n    rp = ec2.run_instances(\n        ImageId=ami_id,\n        InstanceType=instance_type,\n        KeyName=instance_key_name,\n        SecurityGroups=[security_group_name],\n        MaxCount=1,\n        MinCount=1,\n        IamInstanceProfile={\n            'Name': ec2_role_name",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "instanceList",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "def instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])\n    return instances\ninstances = instanceList(instIds)\nprint(\"\\nLIST OF RUNNING INSTANCES :\")\nfor i in instances:\n    print(f\"INSTANCE_ID: {i['InstanceId']}, STATUS: {i['State']['Name']}\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "check_instance_health",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "def check_instance_health(instance_id):\n    print(f\"\\nHEALTH STATUS OF INSTANCE {instance_id} : \")\n    wt = ec2.get_waiter('instance_status_ok')\n    wt.wait(InstanceIds=[instance_id])\n    time.sleep(5)\n    rp = ec2.describe_instance_status(InstanceIds=[instance_id])\n    if 'InstanceStatuses' in rp and len(rp['InstanceStatuses']) > 0:\n        status = rp['InstanceStatuses'][0]['InstanceStatus']['Status']\n        return status\n    return \"Unknown\"",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "stop_instances",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "def stop_instances(instIds):\n    ec2.stop_instances(InstanceIds=instIds)\n    wt = ec2.get_waiter('instance_stopped')\n    wt.wait(InstanceIds=instIds)\n    print(f\"\\nINSTANCE {instIds} IS STOPPED.\")\nstop_instances(instIds)\nprint(\"INSTANCES STOPPED\")\n# -----------------------------------------------------------------------------------------------\n# -------------------------Terminate the running instances.--------------------------------------\ndef terminate_instances(instIds):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "terminate_instances",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "def terminate_instances(instIds):\n    ec2.terminate_instances(InstanceIds=instIds)\n    wt = ec2.get_waiter('instance_terminated')\n    wt.wait(InstanceIds=instIds)\nterminate_instances(instIds)\nprint(\"INSTANCE TERMINATED\")\n# ----------------------------------------- ------------------------------------------------------",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "startup_script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "startup_script = 'startup_script.sh'\ns3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')     # provide low level interface to aws services\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "s3_bucket_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "s3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')     # provide low level interface to aws services\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "security_group_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "security_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')     # provide low level interface to aws services\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "instance_key_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "instance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')     # provide low level interface to aws services\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef launch_instance(instance_type='t2.micro', ami_id='ami-0ded8326293d3201b'):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "ec2_role_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "ec2_role_name = 'Devil'\nec2 = boto3.client('ec2')     # provide low level interface to aws services\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef launch_instance(instance_type='t2.micro', ami_id='ami-0ded8326293d3201b'):\n    rp = ec2.run_instances(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "ec2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "ec2 = boto3.client('ec2')     # provide low level interface to aws services\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef launch_instance(instance_type='t2.micro', ami_id='ami-0ded8326293d3201b'):\n    rp = ec2.run_instances(\n        ImageId=ami_id,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "script = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef launch_instance(instance_type='t2.micro', ami_id='ami-0ded8326293d3201b'):\n    rp = ec2.run_instances(\n        ImageId=ami_id,\n        InstanceType=instance_type,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "t2_1",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "t2_1 = launch_instance()\nt2_2 = launch_instance()\nt2_3 = launch_instance()\ninstIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "t2_2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "t2_2 = launch_instance()\nt2_3 = launch_instance()\ninstIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "t2_3",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "t2_3 = launch_instance()\ninstIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])\n    return instances",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "instIds",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "instIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])\n    return instances\ninstances = instanceList(instIds)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "instances",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "peekOfCode": "instances = instanceList(instIds)\nprint(\"\\nLIST OF RUNNING INSTANCES :\")\nfor i in instances:\n    print(f\"INSTANCE_ID: {i['InstanceId']}, STATUS: {i['State']['Name']}\")\n# -----------------------------------------------------------------------------------------------\n# -------------------Check health of the running instances.------------------------------------\ndef check_instance_health(instance_id):\n    print(f\"\\nHEALTH STATUS OF INSTANCE {instance_id} : \")\n    wt = ec2.get_waiter('instance_status_ok')\n    wt.wait(InstanceIds=[instance_id])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.Q",
        "documentation": {}
    },
    {
        "label": "wait_for_instance_running",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def wait_for_instance_running(instance_id):\n    print(f\"Waiting for instance {instance_id} to reach 'running' state...\")\n    waiter = ec2.get_waiter('instance_running')\n    waiter.wait(InstanceIds=[instance_id])\n    print(f\"Instance {instance_id} is now in 'running' state.\")\ndef launch_ec2_instance(instance_type):\n    response = ec2.run_instances(\n        ImageId=ami_id,\n        InstanceType=instance_type,\n        KeyName=instance_key_name,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "launch_ec2_instance",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def launch_ec2_instance(instance_type):\n    response = ec2.run_instances(\n        ImageId=ami_id,\n        InstanceType=instance_type,\n        KeyName=instance_key_name,\n        SecurityGroups=[security_group_name],\n        MaxCount=1,\n        MinCount=1,\n        IamInstanceProfile={'Name': ec2_role_name},\n        UserData=user_data_script.format(bucket_name=s3_bucket_name)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "list_running_instances",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def list_running_instances():\n    instances = []\n    response = ec2.describe_instances(\n        Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])\n    for reservation in response['Reservations']:\n        instances.extend(reservation['Instances'])\n    return instances\ndef stop_and_terminate_instances(instance_ids):\n    print(\"Stopping and terminating instances...\")\n    ec2.terminate_instances(InstanceIds=instance_ids)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "stop_and_terminate_instances",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def stop_and_terminate_instances(instance_ids):\n    print(\"Stopping and terminating instances...\")\n    ec2.terminate_instances(InstanceIds=instance_ids)\n    waiter = ec2.get_waiter('instance_terminated')\n    waiter.wait(InstanceIds=instance_ids)\n    print(\"Instances terminated.\")\ndef main():\n    try:\n        # Launch instances\n        instance_type_list = ['t2.micro', 't2.nano', 't2.nano']",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def main():\n    try:\n        # Launch instances\n        instance_type_list = ['t2.micro', 't2.nano', 't2.nano']\n        instance_ids = [launch_ec2_instance(\n            instance_type) for instance_type in instance_type_list]\n        # List running instances\n        running_instances = list_running_instances()\n        print(\"Running instances:\")\n        for instance in running_instances:",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "waitfn",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def waitfn(instance_id):\n    wt = ec2.get_waiter('instance_running')\n    wt.wait(InstanceIds=[instance_id])\n    print(f\"\\nINSTANCE {instance_id} IS RUNNING STATE.\")\ndef launch_instance(instance_type='t2.micro', ami_id='ami-0ded8326293d3201b'):\n    rp = ec2.run_instances(\n        ImageId=ami_id,\n        InstanceType=instance_type,\n        KeyName=instance_key_name,\n        SecurityGroups=[security_group_name],",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "launch_instance",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def launch_instance(instance_type='t2.micro', ami_id='ami-0ded8326293d3201b'):\n    rp = ec2.run_instances(\n        ImageId=ami_id,\n        InstanceType=instance_type,\n        KeyName=instance_key_name,\n        SecurityGroups=[security_group_name],\n        MaxCount=1,\n        MinCount=1,\n        IamInstanceProfile={\n            'Name': ec2_role_name",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "instanceList",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])\n    return instances\ninstances = instanceList(instIds)\nprint(\"\\nLIST OF RUNNING INSTANCES :\")\nfor i in instances:\n    print(f\"INSTANCE_ID: {i['InstanceId']}, STATUS: {i['State']['Name']}\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "check_instance_health",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def check_instance_health(instance_id):\n    print(f\"\\nHEALTH STATUS OF INSTANCE {instance_id} : \")\n    wt = ec2.get_waiter('instance_status_ok')\n    wt.wait(InstanceIds=[instance_id])\n    time.sleep(5)\n    rp = ec2.describe_instance_status(InstanceIds=[instance_id])\n    if 'InstanceStatuses' in rp and len(rp['InstanceStatuses']) > 0:\n        status = rp['InstanceStatuses'][0]['InstanceStatus']['Status']\n        return status\n    return \"Unknown\"",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "stop_instances",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def stop_instances(instIds):\n    ec2.stop_instances(InstanceIds=instIds)\n    wt = ec2.get_waiter('instance_stopped')\n    wt.wait(InstanceIds=instIds)\n    print(f\"\\nINSTANCE {instIds} IS STOPPED.\")\nstop_instances(instIds)\nprint(\"INSTANCES STOPPED\")\n# -----------------------------------------------------------------------------------------------\n# -------------------------Terminate the running instances.--------------------------------------\ndef terminate_instances(instIds):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "terminate_instances",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "def terminate_instances(instIds):\n    ec2.terminate_instances(InstanceIds=instIds)\n    wt = ec2.get_waiter('instance_terminated')\n    wt.wait(InstanceIds=instIds)\nterminate_instances(instIds)\nprint(\"INSTANCE TERMINATED\")\n# ----------------------------------------- ------------------------------------------------------",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "startup_script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "startup_script = 'startup_script.sh'\ns3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nami_id = 'ami-0ded8326293d3201b'  # Replace with your desired AMI ID\n# Initialize Boto3 client\nec2 = boto3.client('ec2')\n# User data script\nuser_data_script = '''#!/bin/bash",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "s3_bucket_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "s3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nami_id = 'ami-0ded8326293d3201b'  # Replace with your desired AMI ID\n# Initialize Boto3 client\nec2 = boto3.client('ec2')\n# User data script\nuser_data_script = '''#!/bin/bash\nsudo yum install httpd -y",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "security_group_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "security_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nami_id = 'ami-0ded8326293d3201b'  # Replace with your desired AMI ID\n# Initialize Boto3 client\nec2 = boto3.client('ec2')\n# User data script\nuser_data_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "instance_key_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "instance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nami_id = 'ami-0ded8326293d3201b'  # Replace with your desired AMI ID\n# Initialize Boto3 client\nec2 = boto3.client('ec2')\n# User data script\nuser_data_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://{bucket_name}/website/ /var/www/html/",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "ec2_role_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "ec2_role_name = 'Devil'\nami_id = 'ami-0ded8326293d3201b'  # Replace with your desired AMI ID\n# Initialize Boto3 client\nec2 = boto3.client('ec2')\n# User data script\nuser_data_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://{bucket_name}/website/ /var/www/html/\n'''",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "ami_id",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "ami_id = 'ami-0ded8326293d3201b'  # Replace with your desired AMI ID\n# Initialize Boto3 client\nec2 = boto3.client('ec2')\n# User data script\nuser_data_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://{bucket_name}/website/ /var/www/html/\n'''\ndef wait_for_instance_running(instance_id):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "ec2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "ec2 = boto3.client('ec2')\n# User data script\nuser_data_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://{bucket_name}/website/ /var/www/html/\n'''\ndef wait_for_instance_running(instance_id):\n    print(f\"Waiting for instance {instance_id} to reach 'running' state...\")\n    waiter = ec2.get_waiter('instance_running')",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "user_data_script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "user_data_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://{bucket_name}/website/ /var/www/html/\n'''\ndef wait_for_instance_running(instance_id):\n    print(f\"Waiting for instance {instance_id} to reach 'running' state...\")\n    waiter = ec2.get_waiter('instance_running')\n    waiter.wait(InstanceIds=[instance_id])\n    print(f\"Instance {instance_id} is now in 'running' state.\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "startup_script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "startup_script = 'startup_script.sh'\ns3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "s3_bucket_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "s3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "security_group_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "security_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "instance_key_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "instance_key_name = 'Vishal'\nec2_role_name = 'Devil'\nec2 = boto3.client('ec2')\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef waitfn(instance_id):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "ec2_role_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "ec2_role_name = 'Devil'\nec2 = boto3.client('ec2')\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef waitfn(instance_id):\n    wt = ec2.get_waiter('instance_running')",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "ec2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "ec2 = boto3.client('ec2')\nscript = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef waitfn(instance_id):\n    wt = ec2.get_waiter('instance_running')\n    wt.wait(InstanceIds=[instance_id])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "script = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n# ---------------------Launch an t2.micro Amzon Linux instance.--------------------------------\ndef waitfn(instance_id):\n    wt = ec2.get_waiter('instance_running')\n    wt.wait(InstanceIds=[instance_id])\n    print(f\"\\nINSTANCE {instance_id} IS RUNNING STATE.\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "t2_1",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "t2_1 = launch_instance()\nt2_2 = launch_instance()\nt2_3 = launch_instance()\ninstIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "t2_2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "t2_2 = launch_instance()\nt2_3 = launch_instance()\ninstIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "t2_3",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "t2_3 = launch_instance()\ninstIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])\n    return instances",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "instIds",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "instIds = [t2_1, t2_2, t2_3]\n# ---------------------------------------------------------------------------------------------\n# ---------------------------List all the running instances.-----------------------------------\ndef instanceList(instance_id):\n    rp = ec2.describe_instances(InstanceIds=instance_id)\n    instances = []\n    for reservation in rp['Reservations']:\n        instances.extend(reservation['Instances'])\n    return instances\ninstances = instanceList(instIds)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "instances",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "peekOfCode": "instances = instanceList(instIds)\nprint(\"\\nLIST OF RUNNING INSTANCES :\")\nfor i in instances:\n    print(f\"INSTANCE_ID: {i['InstanceId']}, STATUS: {i['State']['Name']}\")\n# -----------------------------------------------------------------------------------------------\n# -------------------Check health of the running instances.------------------------------------\ndef check_instance_health(instance_id):\n    print(f\"\\nHEALTH STATUS OF INSTANCE {instance_id} : \")\n    wt = ec2.get_waiter('instance_status_ok')\n    wt.wait(InstanceIds=[instance_id])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab3.t",
        "documentation": {}
    },
    {
        "label": "create_autoscaling_group",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "def create_autoscaling_group():\n    client = boto3.client(\"autoscaling\")\n    response = client.create_auto_scaling_group(\n        AutoScalingGroupName=\"auto-scale-gp\",\n        MinSize=0,\n        DesiredCapacity=2,\n        MaxSize=2,\n        LaunchTemplate={\"LaunchTemplateName\": \"lt1\"},\n        AvailabilityZones=[\"ap-south-1a\", \"ap-south-1b\", \"ap-south-1c\"],\n    )",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "create_launch_template",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "def create_launch_template():\n    client = boto3.client(\"ec2\")\n    response = client.create_launch_template(\n        LaunchTemplateName=\"lt1\",\n        LaunchTemplateData={\n            \"ImageId\": \"ami-0ded8326293d3201b\",\n            \"InstanceType\": \"t2.micro\",\n            \"KeyName\": \"Vishal\",\n            \"SecurityGroups\": [\"web-tier\"],\n            \"IamInstanceProfile\": {",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "create_up_scaling_policies",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "def create_up_scaling_policies():\n    client = boto3.client(\"autoscaling\")\n    response = client.put_scaling_policy(\n        AutoScalingGroupName=\"auto-scale-gp\",\n        PolicyName='scale-up-policy',\n        PolicyType='StepScaling',\n        AdjustmentType=\"ChangeInCapacity\",\n        StepAdjustments=[\n            {\n                \"MetricIntervalLowerBound\": 0,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "create_down_scaling_policies",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "def create_down_scaling_policies():\n    client = boto3.client(\"autoscaling\")\n    response = client.put_scaling_policy(\n        AutoScalingGroupName=\"auto-scale-gp\",\n        PolicyName='scale-down-policy',\n        PolicyType='StepScaling',\n        AdjustmentType=\"ChangeInCapacity\",\n        StepAdjustments=[\n            {\n                \"MetricIntervalUpperBound\": 0,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "create_cloudwatch_alarms",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "def create_cloudwatch_alarms(scale_up_policy_arn, scale_down_policy_arn):\n    client = boto3.client(\"cloudwatch\")\n    response_up_alarm = client.put_metric_alarm(\n        AlarmName=\"scale-up-alarm\",\n        ComparisonOperator=\"GreaterThanThreshold\",\n        EvaluationPeriods=1,\n        MetricName=\"CPUUtilization\",\n        Namespace='AWS/EC2',\n        Period=30,\n        Statistic=\"Average\",",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "script = '''#!/bin/bash\\n\nsudo yum install httpd -y\\n\nsudo service httpd start\n# used to synchronize the contents of a local directory with an Amazon S3 bucket.\\n\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''.encode('ascii')\nscript = base64.b64encode(script)\ndef create_autoscaling_group():\n    client = boto3.client(\"autoscaling\")\n    response = client.create_auto_scaling_group(\n        AutoScalingGroupName=\"auto-scale-gp\",",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "script",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "script = base64.b64encode(script)\ndef create_autoscaling_group():\n    client = boto3.client(\"autoscaling\")\n    response = client.create_auto_scaling_group(\n        AutoScalingGroupName=\"auto-scale-gp\",\n        MinSize=0,\n        DesiredCapacity=2,\n        MaxSize=2,\n        LaunchTemplate={\"LaunchTemplateName\": \"lt1\"},\n        AvailabilityZones=[\"ap-south-1a\", \"ap-south-1b\", \"ap-south-1c\"],",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "launch_template_response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "launch_template_response = create_launch_template()\ncreate_autoscaling_group()\nup_scaling_policy_response = create_up_scaling_policies()\ndown_scaling_policy_response = create_down_scaling_policies()\ncreate_cloudwatch_alarms(\n    up_scaling_policy_response[\"PolicyARN\"], down_scaling_policy_response[\"PolicyARN\"])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "up_scaling_policy_response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "up_scaling_policy_response = create_up_scaling_policies()\ndown_scaling_policy_response = create_down_scaling_policies()\ncreate_cloudwatch_alarms(\n    up_scaling_policy_response[\"PolicyARN\"], down_scaling_policy_response[\"PolicyARN\"])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "down_scaling_policy_response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "peekOfCode": "down_scaling_policy_response = create_down_scaling_policies()\ncreate_cloudwatch_alarms(\n    up_scaling_policy_response[\"PolicyARN\"], down_scaling_policy_response[\"PolicyARN\"])",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.2101227_q",
        "documentation": {}
    },
    {
        "label": "launch_template",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "def launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):\n    template = ec2.create_launch_template(\n        LaunchTemplateName=TemplateName,\n        LaunchTemplateData={\n            'ImageId': 'ami-0ded8326293d3201b',\n            'InstanceType': InstanceType,\n            'SecurityGroupIds': SecurityGroup,\n            'KeyName': KeyName,\n            'UserData': UserData,\n            'IamInstanceProfile': {",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "create_autoscaling_group",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "def create_autoscaling_group(TemplateName, GroupName, minSize, maxSize):\n    autoscaling_group = autoscaling_client.create_auto_scaling_group(\n        AutoScalingGroupName=GroupName,\n        LaunchTemplate={\n            'LaunchTemplateName': TemplateName,\n            'Version': '$Default',\n        },\n        MinSize=minSize,\n        MaxSize=maxSize,\n        DesiredCapacity=2,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "file = open(\"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\college1\\\\Labs\\\\semester 5\\\\IT-workshop\\\\2101227_Assign_Lab4\\\\script.sh\", \"r\")\nsrc = '\\n'.join(file)\nec2 = boto3.client('ec2')\nautoscaling_client = boto3.client('autoscaling')\ncloudwatch = boto3.client('cloudwatch')\nencoded_src = base64.b64encode(src.encode()).decode('utf-8')\n# defining some values for further use\nGroupName = \"auto-scale-gp\"\nTemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "src",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "src = '\\n'.join(file)\nec2 = boto3.client('ec2')\nautoscaling_client = boto3.client('autoscaling')\ncloudwatch = boto3.client('cloudwatch')\nencoded_src = base64.b64encode(src.encode()).decode('utf-8')\n# defining some values for further use\nGroupName = \"auto-scale-gp\"\nTemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "ec2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "ec2 = boto3.client('ec2')\nautoscaling_client = boto3.client('autoscaling')\ncloudwatch = boto3.client('cloudwatch')\nencoded_src = base64.b64encode(src.encode()).decode('utf-8')\n# defining some values for further use\nGroupName = \"auto-scale-gp\"\nTemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "autoscaling_client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "autoscaling_client = boto3.client('autoscaling')\ncloudwatch = boto3.client('cloudwatch')\nencoded_src = base64.b64encode(src.encode()).decode('utf-8')\n# defining some values for further use\nGroupName = \"auto-scale-gp\"\nTemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"\nUserData = encoded_src",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "cloudwatch",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "cloudwatch = boto3.client('cloudwatch')\nencoded_src = base64.b64encode(src.encode()).decode('utf-8')\n# defining some values for further use\nGroupName = \"auto-scale-gp\"\nTemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"\nUserData = encoded_src\nIamInstanceProfile = 'Devil'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "encoded_src",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "encoded_src = base64.b64encode(src.encode()).decode('utf-8')\n# defining some values for further use\nGroupName = \"auto-scale-gp\"\nTemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"\nUserData = encoded_src\nIamInstanceProfile = 'Devil'\nminSize = 1",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "GroupName",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "GroupName = \"auto-scale-gp\"\nTemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"\nUserData = encoded_src\nIamInstanceProfile = 'Devil'\nminSize = 1\nmaxSize = 3\n# instance type",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "TemplateName",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "TemplateName = \"devil-auto-scaler\"\nKeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"\nUserData = encoded_src\nIamInstanceProfile = 'Devil'\nminSize = 1\nmaxSize = 3\n# instance type\n# for launching template ",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "KeyName",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "KeyName = 'Vishal'\nSecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"\nUserData = encoded_src\nIamInstanceProfile = 'Devil'\nminSize = 1\nmaxSize = 3\n# instance type\n# for launching template \ndef launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "SecurityGroupIds",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "SecurityGroupIds = ['sg-07f28fef7a606ceda']\nInstanceType = \"t2.micro\"\nUserData = encoded_src\nIamInstanceProfile = 'Devil'\nminSize = 1\nmaxSize = 3\n# instance type\n# for launching template \ndef launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):\n    template = ec2.create_launch_template(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "InstanceType",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "InstanceType = \"t2.micro\"\nUserData = encoded_src\nIamInstanceProfile = 'Devil'\nminSize = 1\nmaxSize = 3\n# instance type\n# for launching template \ndef launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):\n    template = ec2.create_launch_template(\n        LaunchTemplateName=TemplateName,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "UserData = encoded_src\nIamInstanceProfile = 'Devil'\nminSize = 1\nmaxSize = 3\n# instance type\n# for launching template \ndef launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):\n    template = ec2.create_launch_template(\n        LaunchTemplateName=TemplateName,\n        LaunchTemplateData={",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "IamInstanceProfile",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "IamInstanceProfile = 'Devil'\nminSize = 1\nmaxSize = 3\n# instance type\n# for launching template \ndef launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):\n    template = ec2.create_launch_template(\n        LaunchTemplateName=TemplateName,\n        LaunchTemplateData={\n            'ImageId': 'ami-0ded8326293d3201b',",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "minSize",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "minSize = 1\nmaxSize = 3\n# instance type\n# for launching template \ndef launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):\n    template = ec2.create_launch_template(\n        LaunchTemplateName=TemplateName,\n        LaunchTemplateData={\n            'ImageId': 'ami-0ded8326293d3201b',\n            'InstanceType': InstanceType,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "maxSize",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "maxSize = 3\n# instance type\n# for launching template \ndef launch_template(TemplateName, InstanceType, UserData, KeyName, SecurityGroup, IamInstacneProfile):\n    template = ec2.create_launch_template(\n        LaunchTemplateName=TemplateName,\n        LaunchTemplateData={\n            'ImageId': 'ami-0ded8326293d3201b',\n            'InstanceType': InstanceType,\n            'SecurityGroupIds': SecurityGroup,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "scale_in_policy",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "scale_in_policy = {\n    'PolicyName': 'scale_in',\n    'AutoScalingGroupName': GroupName,\n    'AdjustmentType': 'ChangeInCapacity',   #criteria for increasing instance it can be request also\n    'PolicyType': 'StepScaling',    # type target , simple\n    'StepAdjustments': [\n        {\n            'MetricIntervalUpperBound': 0,\n            'ScalingAdjustment': -1,\n        },",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "scale_out_policy",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "scale_out_policy = {\n    'PolicyName': 'scale_out',\n    'AutoScalingGroupName': GroupName,\n    'AdjustmentType': 'ChangeInCapacity',\n    'PolicyType': 'StepScaling',\n    'StepAdjustments': [\n        {\n            'MetricIntervalLowerBound': 0,\n            'ScalingAdjustment': 1,\n        },",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "template = launch_template(TemplateName, InstanceType,\n                           UserData, KeyName, SecurityGroupIds, IamInstanceProfile)\nprint(template)\nautoscaling_group = create_autoscaling_group(\n    TemplateName, GroupName, minSize, maxSize)\nprint(autoscaling_group)\nscale_in_policy_response = autoscaling_client.put_scaling_policy(\n    **scale_in_policy)\nscale_out_policy_response = autoscaling_client.put_scaling_policy(\n    **scale_out_policy)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "autoscaling_group",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "autoscaling_group = create_autoscaling_group(\n    TemplateName, GroupName, minSize, maxSize)\nprint(autoscaling_group)\nscale_in_policy_response = autoscaling_client.put_scaling_policy(\n    **scale_in_policy)\nscale_out_policy_response = autoscaling_client.put_scaling_policy(\n    **scale_out_policy)\nprint(scale_in_policy_response)\nprint(scale_out_policy_response)\n# create alarms",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "scale_in_policy_response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "scale_in_policy_response = autoscaling_client.put_scaling_policy(\n    **scale_in_policy)\nscale_out_policy_response = autoscaling_client.put_scaling_policy(\n    **scale_out_policy)\nprint(scale_in_policy_response)\nprint(scale_out_policy_response)\n# create alarms\nscale_out_alarm = {\n    'AlarmName': 'HighUtilization',\n    'ComparisonOperator': 'GreaterThanOrEqualToThreshold',",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "scale_out_policy_response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "scale_out_policy_response = autoscaling_client.put_scaling_policy(\n    **scale_out_policy)\nprint(scale_in_policy_response)\nprint(scale_out_policy_response)\n# create alarms\nscale_out_alarm = {\n    'AlarmName': 'HighUtilization',\n    'ComparisonOperator': 'GreaterThanOrEqualToThreshold',\n    'EvaluationPeriods': 1,\n    'MetricName': 'CPUUtilization',   # graph of request or memory",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "scale_out_alarm",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "scale_out_alarm = {\n    'AlarmName': 'HighUtilization',\n    'ComparisonOperator': 'GreaterThanOrEqualToThreshold',\n    'EvaluationPeriods': 1,\n    'MetricName': 'CPUUtilization',   # graph of request or memory\n    'Namespace': 'AWS/EC2', # for which service  type - sutocalling\n    'Period': 60,\n    'Statistic': 'Average',\n    'Threshold': 50,\n    'AlarmDescription': 'Alarm when server CPU exceeds 80%',",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "scale_in_alarm",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "scale_in_alarm = {\n    'AlarmName': 'LowUtilization',\n    'ComparisonOperator': 'LessThanOrEqualToThreshold',\n    'EvaluationPeriods': 1,\n    'MetricName': 'CPUUtilization',\n    'Namespace': 'AWS/EC2',\n    'Period': 60,\n    'Statistic': 'Average',\n    'Threshold': 20,\n    'AlarmDescription': 'Alarm when server CPU falls short of 20%',",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "ec2_client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "ec2_client = boto3.client('ec2')\n# Use the describe_instances() method to get information about all running instances\nresponse = ec2_client.describe_instances(\n    Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])\nfor reservation in response['Reservations']:\n    for instance in reservation['Instances']:\n        instance_id = instance['InstanceId']\n        # Use Public DNS name, change to Private if needed\n        dns_name = instance.get('PublicDnsName', 'N/A')\n        print(f\"Instance ID: {instance_id}, DNS Name: {dns_name}\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "peekOfCode": "response = ec2_client.describe_instances(\n    Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])\nfor reservation in response['Reservations']:\n    for instance in reservation['Instances']:\n        instance_id = instance['InstanceId']\n        # Use Public DNS name, change to Private if needed\n        dns_name = instance.get('PublicDnsName', 'N/A')\n        print(f\"Instance ID: {instance_id}, DNS Name: {dns_name}\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.auto",
        "documentation": {}
    },
    {
        "label": "create_launch_template",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "peekOfCode": "def create_launch_template():\n    ec2_client = boto3.client(\"ec2\")\n    startup_script = '''#!/bin/bash\nsudo yum install httpd -y\nsudo service httpd start\nsudo aws s3 sync s3://peakyblinders/website/ /var/www/html/'''\n    user_data = base64.b64encode(startup_script.encode()).decode('utf-8')\n    response = ec2_client.create_launch_template(\n        LaunchTemplateName=\"lt1\",\n        LaunchTemplateData={",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "documentation": {}
    },
    {
        "label": "create_autoscaling_group",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "peekOfCode": "def create_autoscaling_group(launch_template_name):\n    asg_client = boto3.client(\"autoscaling\")\n    response = asg_client.create_auto_scaling_group(\n        AutoScalingGroupName=\"auto-scale-gp\",\n        MinSize=0,\n        MaxSize=2,  # Adjust as needed\n        DesiredCapacity=2,\n        LaunchTemplate={\"LaunchTemplateName\": launch_template_name},\n        AvailabilityZones=[\"ap-south-1a\", \"ap-south-1b\", \"ap-south-1c\"],\n    )",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "documentation": {}
    },
    {
        "label": "create_scaling_policies",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "peekOfCode": "def create_scaling_policies(asg_name):\n    asg_client = boto3.client(\"autoscaling\")\n    # Create a scale-up policy\n    asg_client.put_scaling_policy(\n        AutoScalingGroupName=asg_name,\n        PolicyName='scale-up-policy',\n        PolicyType='TargetTrackingScaling',\n        TargetTrackingConfiguration={\n            'PredefinedMetricSpecification': {\n                'PredefinedMetricType': 'ASGAverageCPUUtilization',",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "documentation": {}
    },
    {
        "label": "create_cloudwatch_alarms",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "peekOfCode": "def create_cloudwatch_alarms(asg_name):\n    cloudwatch_client = boto3.client(\"cloudwatch\")\n    # Create scale-up alarm\n    cloudwatch_client.put_metric_alarm(\n        AlarmName=\"scale-up-alarm\",\n        ComparisonOperator=\"GreaterThanThreshold\",\n        EvaluationPeriods=1,\n        MetricName=\"CPUUtilization\",\n        Namespace='AWS/EC2',\n        Period=60,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab4.t",
        "documentation": {}
    },
    {
        "label": "s3_bucket_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "peekOfCode": "s3_bucket_name = 'peakyblinders'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\nec2 = boto3.resource(\"ec2\")\ninstances = ec2.create_instances(\n    ImageId='ami-0ded8326293d3201b',\n    MinCount=1,\n    MaxCount=1,\n    InstanceType=\"t2.micro\",",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "documentation": {}
    },
    {
        "label": "security_group_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "peekOfCode": "security_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\nec2 = boto3.resource(\"ec2\")\ninstances = ec2.create_instances(\n    ImageId='ami-0ded8326293d3201b',\n    MinCount=1,\n    MaxCount=1,\n    InstanceType=\"t2.micro\",\n    KeyName=instance_key_name,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "documentation": {}
    },
    {
        "label": "instance_key_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "peekOfCode": "instance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\nec2 = boto3.resource(\"ec2\")\ninstances = ec2.create_instances(\n    ImageId='ami-0ded8326293d3201b',\n    MinCount=1,\n    MaxCount=1,\n    InstanceType=\"t2.micro\",\n    KeyName=instance_key_name,\n    SecurityGroupIds=['sg-07f28fef7a606ceda'],",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "documentation": {}
    },
    {
        "label": "ec2_role_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "peekOfCode": "ec2_role_name = 'Devil'      # s3 Access Role\nec2 = boto3.resource(\"ec2\")\ninstances = ec2.create_instances(\n    ImageId='ami-0ded8326293d3201b',\n    MinCount=1,\n    MaxCount=1,\n    InstanceType=\"t2.micro\",\n    KeyName=instance_key_name,\n    SecurityGroupIds=['sg-07f28fef7a606ceda'],\n    UserData=open(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "documentation": {}
    },
    {
        "label": "ec2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "peekOfCode": "ec2 = boto3.resource(\"ec2\")\ninstances = ec2.create_instances(\n    ImageId='ami-0ded8326293d3201b',\n    MinCount=1,\n    MaxCount=1,\n    InstanceType=\"t2.micro\",\n    KeyName=instance_key_name,\n    SecurityGroupIds=['sg-07f28fef7a606ceda'],\n    UserData=open(\n        \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\college1\\\\Labs\\\\semester 5\\\\IT-workshop\\\\2101227_Assign_Lab5\\\\start_script.sh\"",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "documentation": {}
    },
    {
        "label": "instances",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "peekOfCode": "instances = ec2.create_instances(\n    ImageId='ami-0ded8326293d3201b',\n    MinCount=1,\n    MaxCount=1,\n    InstanceType=\"t2.micro\",\n    KeyName=instance_key_name,\n    SecurityGroupIds=['sg-07f28fef7a606ceda'],\n    UserData=open(\n        \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\college1\\\\Labs\\\\semester 5\\\\IT-workshop\\\\2101227_Assign_Lab5\\\\start_script.sh\"\n    ).read(),",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "documentation": {}
    },
    {
        "label": "instance",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "peekOfCode": "instance = instances[0]\ninstance.wait_until_running()\ninstance.load()\nprint(instance.public_dns_name)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.launch_ec2",
        "documentation": {}
    },
    {
        "label": "rds_client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "rds_client = boto3.client('rds')\n# Define RDS instance details\ninstance_name = 'portfolio'\ndb_instance_identifier = 'portfolio-db-identifier'\ndb_name = 'contact_form'\nmaster_username = 'Vishal'\nmaster_password = 'password'\ninstance_class = 'db.t2.micro'  # Choose an appropriate instance type\nallocated_storage = 20  # GB\n# Create the RDS instance",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "instance_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "instance_name = 'portfolio'\ndb_instance_identifier = 'portfolio-db-identifier'\ndb_name = 'contact_form'\nmaster_username = 'Vishal'\nmaster_password = 'password'\ninstance_class = 'db.t2.micro'  # Choose an appropriate instance type\nallocated_storage = 20  # GB\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "db_instance_identifier",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "db_instance_identifier = 'portfolio-db-identifier'\ndb_name = 'contact_form'\nmaster_username = 'Vishal'\nmaster_password = 'password'\ninstance_class = 'db.t2.micro'  # Choose an appropriate instance type\nallocated_storage = 20  # GB\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    DBInstanceClass=instance_class,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "db_name = 'contact_form'\nmaster_username = 'Vishal'\nmaster_password = 'password'\ninstance_class = 'db.t2.micro'  # Choose an appropriate instance type\nallocated_storage = 20  # GB\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    DBInstanceClass=instance_class,\n    AllocatedStorage=allocated_storage,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "master_username",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "master_username = 'Vishal'\nmaster_password = 'password'\ninstance_class = 'db.t2.micro'  # Choose an appropriate instance type\nallocated_storage = 20  # GB\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    DBInstanceClass=instance_class,\n    AllocatedStorage=allocated_storage,\n    Engine='mysql',  # or 'mysql' for MySQL",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "master_password",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "master_password = 'password'\ninstance_class = 'db.t2.micro'  # Choose an appropriate instance type\nallocated_storage = 20  # GB\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    DBInstanceClass=instance_class,\n    AllocatedStorage=allocated_storage,\n    Engine='mysql',  # or 'mysql' for MySQL\n    MasterUsername=master_username,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "instance_class",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "instance_class = 'db.t2.micro'  # Choose an appropriate instance type\nallocated_storage = 20  # GB\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    DBInstanceClass=instance_class,\n    AllocatedStorage=allocated_storage,\n    Engine='mysql',  # or 'mysql' for MySQL\n    MasterUsername=master_username,\n    MasterUserPassword=master_password,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "allocated_storage",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "allocated_storage = 20  # GB\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    DBInstanceClass=instance_class,\n    AllocatedStorage=allocated_storage,\n    Engine='mysql',  # or 'mysql' for MySQL\n    MasterUsername=master_username,\n    MasterUserPassword=master_password,\n    DBName=db_name,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "waiter",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "peekOfCode": "waiter = rds_client.get_waiter('db_instance_available')\nwaiter.wait(DBInstanceIdentifier=db_instance_identifier)\nprint(f'RDS instance {db_instance_identifier} is available.')",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.q",
        "documentation": {}
    },
    {
        "label": "rds_client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "peekOfCode": "rds_client = boto3.client('rds')\n# Define RDS instance details\ndb_instance_identifier = 'your-db-instance-id'\ndb_instance_class = 'db.t2.micro'\nengine = 'mysql'  # or 'mysql'\nmaster_username = 'admin'\nmaster_password = 'password'\ndb_name = 'contact_form'\n# Create the RDS instance\nrds_client.create_db_instance(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "documentation": {}
    },
    {
        "label": "db_instance_identifier",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "peekOfCode": "db_instance_identifier = 'your-db-instance-id'\ndb_instance_class = 'db.t2.micro'\nengine = 'mysql'  # or 'mysql'\nmaster_username = 'admin'\nmaster_password = 'password'\ndb_name = 'contact_form'\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=20,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "documentation": {}
    },
    {
        "label": "db_instance_class",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "peekOfCode": "db_instance_class = 'db.t2.micro'\nengine = 'mysql'  # or 'mysql'\nmaster_username = 'admin'\nmaster_password = 'password'\ndb_name = 'contact_form'\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=20,\n    DBInstanceClass=db_instance_class,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "peekOfCode": "engine = 'mysql'  # or 'mysql'\nmaster_username = 'admin'\nmaster_password = 'password'\ndb_name = 'contact_form'\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=20,\n    DBInstanceClass=db_instance_class,\n    Engine=engine,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "documentation": {}
    },
    {
        "label": "master_username",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "peekOfCode": "master_username = 'admin'\nmaster_password = 'password'\ndb_name = 'contact_form'\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=20,\n    DBInstanceClass=db_instance_class,\n    Engine=engine,\n    MasterUsername=master_username,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "documentation": {}
    },
    {
        "label": "master_password",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "peekOfCode": "master_password = 'password'\ndb_name = 'contact_form'\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=20,\n    DBInstanceClass=db_instance_class,\n    Engine=engine,\n    MasterUsername=master_username,\n    MasterUserPassword=master_password,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "peekOfCode": "db_name = 'contact_form'\n# Create the RDS instance\nrds_client.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=20,\n    DBInstanceClass=db_instance_class,\n    Engine=engine,\n    MasterUsername=master_username,\n    MasterUserPassword=master_password,\n    DBName=db_name,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.r",
        "documentation": {}
    },
    {
        "label": "rdsClient",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.rds",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.rds",
        "peekOfCode": "rdsClient = boto3.client(\n    \"rds\",\n    region_name=\"us-east-1\",\n)\nresponse = rdsClient.create_db_instance(\n    DBName=\"vishal\",\n    DBInstanceIdentifier=\"vishal\",\n    AllocatedStorage=5,\n    DBInstanceClass=\"db.t2.micro\",\n    Engine=\"MySQL\",",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.rds",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.rds",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.rds",
        "peekOfCode": "response = rdsClient.create_db_instance(\n    DBName=\"vishal\",\n    DBInstanceIdentifier=\"vishal\",\n    AllocatedStorage=5,\n    DBInstanceClass=\"db.t2.micro\",\n    Engine=\"MySQL\",\n    MasterUsername=\"Vishal\",\n    MasterUserPassword=\"password\",\n    PubliclyAccessible=True,\n)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab5.rds",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "peekOfCode": "client = boto3.client(\"elasticbeanstalk\")\ns3_bucket_name = 'peakyblinders1'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\nclient.create_application_version(\n    ApplicationName=\"portfolioapp\",\n    AutoCreateApplication=True,\n    Description=\"vishal_prajapati portfolio website\",\n    Process=True,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "documentation": {}
    },
    {
        "label": "s3_bucket_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "peekOfCode": "s3_bucket_name = 'peakyblinders1'\nsecurity_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\nclient.create_application_version(\n    ApplicationName=\"portfolioapp\",\n    AutoCreateApplication=True,\n    Description=\"vishal_prajapati portfolio website\",\n    Process=True,\n    SourceBundle={",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "documentation": {}
    },
    {
        "label": "security_group_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "peekOfCode": "security_group_name = 'web-tier'\ninstance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\nclient.create_application_version(\n    ApplicationName=\"portfolioapp\",\n    AutoCreateApplication=True,\n    Description=\"vishal_prajapati portfolio website\",\n    Process=True,\n    SourceBundle={\n        \"S3Bucket\": \"peakyblinders1\",",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "documentation": {}
    },
    {
        "label": "instance_key_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "peekOfCode": "instance_key_name = 'Vishal'\nec2_role_name = 'Devil'      # s3 Access Role\nclient.create_application_version(\n    ApplicationName=\"portfolioapp\",\n    AutoCreateApplication=True,\n    Description=\"vishal_prajapati portfolio website\",\n    Process=True,\n    SourceBundle={\n        \"S3Bucket\": \"peakyblinders1\",\n        \"S3Key\": \"Portfolio.zip\",",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "documentation": {}
    },
    {
        "label": "ec2_role_name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "peekOfCode": "ec2_role_name = 'Devil'      # s3 Access Role\nclient.create_application_version(\n    ApplicationName=\"portfolioapp\",\n    AutoCreateApplication=True,\n    Description=\"vishal_prajapati portfolio website\",\n    Process=True,\n    SourceBundle={\n        \"S3Bucket\": \"peakyblinders1\",\n        \"S3Key\": \"Portfolio.zip\",\n    },",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "peekOfCode": "response = client.create_environment(\n    ApplicationName=\"portfolioapp\",\n    CNAMEPrefix=\"vishal\",\n    EnvironmentName=\"portfolio-env\",\n    SolutionStackName=\"64bit Amazon Linux 2 v5.8.5 running Node.js 18\",\n    VersionLabel=\"v1\",\n    OptionSettings=[\n        {\n            \"Namespace\": \"aws:autoscaling:launchconfiguration\",\n            \"OptionName\": \"IamInstanceProfile\",",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab6.Q",
        "documentation": {}
    },
    {
        "label": "create_api",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def create_api(name, description, version, types):\n    response = client.create_rest_api(\n        name=name,\n        description=description,\n        version=version,\n        endpointConfiguration={'types': [types]}\n    )\n    return response['id']\ndef create_resource(apiId, parentId, pathPart):\n    response = client.create_resource(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "create_resource",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def create_resource(apiId, parentId, pathPart):\n    response = client.create_resource(\n        restApiId=apiId,\n        parentId=parentId,\n        pathPart=pathPart\n    )\n    return response['id']\ndef get_parent_id(apiId, parent_resource_path):\n    response = client.get_resources(\n        restApiId=apiId,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "get_parent_id",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def get_parent_id(apiId, parent_resource_path):\n    response = client.get_resources(\n        restApiId=apiId,\n        limit=500  # Adjust the limit as needed to list all resources\n    )\n    parent_resource_id = ''\n    # Iterate through the resources to find the parent resource\n    for resource in response['items']:\n        if resource['path'] == parent_resource_path:\n            parent_resource_id = resource['id']",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "putMethod",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def putMethod(apiId, authorizationType, resourceId, httpMethod):\n    client.put_method(\n        restApiId=apiId,\n        authorizationType=authorizationType,\n        resourceId=resourceId,\n        httpMethod=httpMethod,\n    )\ndef putIntegration(apiId, httpMethod, resourceId, type, integrationHttpMethod, url):\n    client.put_integration(\n        restApiId=apiId,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "putIntegration",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def putIntegration(apiId, httpMethod, resourceId, type, integrationHttpMethod, url):\n    client.put_integration(\n        restApiId=apiId,\n        resourceId=resourceId,\n        httpMethod=httpMethod,\n        type=type,\n        integrationHttpMethod=integrationHttpMethod,\n        uri=url\n    )\ndef put_method_response(apiId, resourceId, httpMethod, statusCode, contentType, Model):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "put_method_response",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def put_method_response(apiId, resourceId, httpMethod, statusCode, contentType, Model):\n    client.put_method_response(\n        restApiId=apiId,\n        resourceId=resourceId,\n        httpMethod=httpMethod,\n        statusCode=statusCode,\n        responseModels={\n            contentType: Model,\n        }\n    )",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "put_integration_response",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def put_integration_response(apiId, resourceId, httpMethod, statusCode):\n    client.put_integration_response(\n        restApiId=apiId,\n        resourceId=resourceId,\n        httpMethod=httpMethod,\n        statusCode=statusCode,\n    )\ndef create_deployement(apiId, stageName):\n    client.create_deployment(\n        restApiId=apiId,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "create_deployement",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "def create_deployement(apiId, stageName):\n    client.create_deployment(\n        restApiId=apiId,\n        stageName=stageName,\n    )\n    print(\"Stage Deployed successfully...\")\n###########################################################\nname = 'portfolio'\ndescription = 'Gateway for microservies in portfolio'\nversion = 'v-1'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "client = boto3.client('apigateway')\ndef create_api(name, description, version, types):\n    response = client.create_rest_api(\n        name=name,\n        description=description,\n        version=version,\n        endpointConfiguration={'types': [types]}\n    )\n    return response['id']\ndef create_resource(apiId, parentId, pathPart):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "name = 'portfolio'\ndescription = 'Gateway for microservies in portfolio'\nversion = 'v-1'\nendpointConfigurationType = 'EDGE'\nauthorizationType = 'NONE'\nhttpMethod = 'GET'\nintegrationHttpMethod = \"GET\"\ntype = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "description = 'Gateway for microservies in portfolio'\nversion = 'v-1'\nendpointConfigurationType = 'EDGE'\nauthorizationType = 'NONE'\nhttpMethod = 'GET'\nintegrationHttpMethod = \"GET\"\ntype = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "version = 'v-1'\nendpointConfigurationType = 'EDGE'\nauthorizationType = 'NONE'\nhttpMethod = 'GET'\nintegrationHttpMethod = \"GET\"\ntype = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "endpointConfigurationType",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "endpointConfigurationType = 'EDGE'\nauthorizationType = 'NONE'\nhttpMethod = 'GET'\nintegrationHttpMethod = \"GET\"\ntype = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "authorizationType",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "authorizationType = 'NONE'\nhttpMethod = 'GET'\nintegrationHttpMethod = \"GET\"\ntype = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "httpMethod",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "httpMethod = 'GET'\nintegrationHttpMethod = \"GET\"\ntype = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "integrationHttpMethod = \"GET\"\ntype = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "type",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "type = 'HTTP'\nstatusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "statusCode",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "statusCode = '200'\ncontentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************\nprint(\"started creating Api Gateway...\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "contentType",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "contentType = 'application/json'\nModel = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\n# Define your API Gateway and resources",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "Model = 'Empty'\nstageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\n# Define your API Gateway and resources\nprint(\"started creating Api Gateway...\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "stageName",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "stageName = 'dev'\nservice1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\n# Define your API Gateway and resources\nprint(\"started creating Api Gateway...\")\napiId = create_api(name, description, version, endpointConfigurationType)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "service1",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "service1 = 'http://ec2-65-0-133-40.ap-south-1.compute.amazonaws.com/'\nservice2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\n# Define your API Gateway and resources\nprint(\"started creating Api Gateway...\")\napiId = create_api(name, description, version, endpointConfigurationType)\nroot = get_parent_id(apiId, '/')",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "service2",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "service2 = 'http://ec2-13-127-254-77.ap-south-1.compute.amazonaws.com/'\nservice3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\n# Define your API Gateway and resources\nprint(\"started creating Api Gateway...\")\napiId = create_api(name, description, version, endpointConfigurationType)\nroot = get_parent_id(apiId, '/')\n# Resource for /submit POST",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "service3",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "service3 = 'http://ec2-65-1-148-153.ap-south-1.compute.amazonaws.com/'\n# ***************************************************************\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\n# Define your API Gateway and resources\nprint(\"started creating Api Gateway...\")\napiId = create_api(name, description, version, endpointConfigurationType)\nroot = get_parent_id(apiId, '/')\n# Resource for /submit POST\n# resourceId_submit = get_parent_id(apiId, '/')",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "apiId",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "apiId = create_api(name, description, version, endpointConfigurationType)\nroot = get_parent_id(apiId, '/')\n# Resource for /submit POST\n# resourceId_submit = get_parent_id(apiId, '/')\nresourceId_submit = create_resource(apiId, root, \"submit\")\nhttpMethod_submit = 'POST'\nintegrationHttpMethod_submit = 'POST'\nuser_post_url = service1 + 'submit'\nputMethod(apiId, authorizationType, resourceId_submit, httpMethod_submit)\nputIntegration(apiId, httpMethod_submit, resourceId_submit,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "root = get_parent_id(apiId, '/')\n# Resource for /submit POST\n# resourceId_submit = get_parent_id(apiId, '/')\nresourceId_submit = create_resource(apiId, root, \"submit\")\nhttpMethod_submit = 'POST'\nintegrationHttpMethod_submit = 'POST'\nuser_post_url = service1 + 'submit'\nputMethod(apiId, authorizationType, resourceId_submit, httpMethod_submit)\nputIntegration(apiId, httpMethod_submit, resourceId_submit,\n               type, integrationHttpMethod_submit, user_post_url)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "resourceId_submit",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "resourceId_submit = create_resource(apiId, root, \"submit\")\nhttpMethod_submit = 'POST'\nintegrationHttpMethod_submit = 'POST'\nuser_post_url = service1 + 'submit'\nputMethod(apiId, authorizationType, resourceId_submit, httpMethod_submit)\nputIntegration(apiId, httpMethod_submit, resourceId_submit,\n               type, integrationHttpMethod_submit, user_post_url)\nput_method_response(apiId, resourceId_submit,\n                    httpMethod_submit, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submit,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "httpMethod_submit",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "httpMethod_submit = 'POST'\nintegrationHttpMethod_submit = 'POST'\nuser_post_url = service1 + 'submit'\nputMethod(apiId, authorizationType, resourceId_submit, httpMethod_submit)\nputIntegration(apiId, httpMethod_submit, resourceId_submit,\n               type, integrationHttpMethod_submit, user_post_url)\nput_method_response(apiId, resourceId_submit,\n                    httpMethod_submit, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submit,\n                         httpMethod_submit, statusCode)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod_submit",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "integrationHttpMethod_submit = 'POST'\nuser_post_url = service1 + 'submit'\nputMethod(apiId, authorizationType, resourceId_submit, httpMethod_submit)\nputIntegration(apiId, httpMethod_submit, resourceId_submit,\n               type, integrationHttpMethod_submit, user_post_url)\nput_method_response(apiId, resourceId_submit,\n                    httpMethod_submit, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submit,\n                         httpMethod_submit, statusCode)\n# Resource for /submissions GET",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "user_post_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "user_post_url = service1 + 'submit'\nputMethod(apiId, authorizationType, resourceId_submit, httpMethod_submit)\nputIntegration(apiId, httpMethod_submit, resourceId_submit,\n               type, integrationHttpMethod_submit, user_post_url)\nput_method_response(apiId, resourceId_submit,\n                    httpMethod_submit, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submit,\n                         httpMethod_submit, statusCode)\n# Resource for /submissions GET\nresourceId_submissions = create_resource(apiId, root, \"submissions\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "resourceId_submissions",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "resourceId_submissions = create_resource(apiId, root, \"submissions\")\nhttpMethod_submissions = 'GET'\nintegrationHttpMethod_submissions = 'GET'\nsubmissions_url = service1 + 'submissions'\nputMethod(apiId, authorizationType,resourceId_submissions, httpMethod_submissions)\nputIntegration(apiId, httpMethod_submissions, resourceId_submissions,type, integrationHttpMethod_submissions, submissions_url)\nput_method_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode)\n# # Resource for /deletesubmission DELETE\n# resourceId_deletesubmission = create_resource(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "httpMethod_submissions",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "httpMethod_submissions = 'GET'\nintegrationHttpMethod_submissions = 'GET'\nsubmissions_url = service1 + 'submissions'\nputMethod(apiId, authorizationType,resourceId_submissions, httpMethod_submissions)\nputIntegration(apiId, httpMethod_submissions, resourceId_submissions,type, integrationHttpMethod_submissions, submissions_url)\nput_method_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode)\n# # Resource for /deletesubmission DELETE\n# resourceId_deletesubmission = create_resource(\n#     apiId, root, \"deletesubmission\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod_submissions",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "integrationHttpMethod_submissions = 'GET'\nsubmissions_url = service1 + 'submissions'\nputMethod(apiId, authorizationType,resourceId_submissions, httpMethod_submissions)\nputIntegration(apiId, httpMethod_submissions, resourceId_submissions,type, integrationHttpMethod_submissions, submissions_url)\nput_method_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode)\n# # Resource for /deletesubmission DELETE\n# resourceId_deletesubmission = create_resource(\n#     apiId, root, \"deletesubmission\")\n# httpMethod_deletesubmission = 'DELETE'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "submissions_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "submissions_url = service1 + 'submissions'\nputMethod(apiId, authorizationType,resourceId_submissions, httpMethod_submissions)\nputIntegration(apiId, httpMethod_submissions, resourceId_submissions,type, integrationHttpMethod_submissions, submissions_url)\nput_method_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode, contentType, Model)\nput_integration_response(apiId, resourceId_submissions,httpMethod_submissions, statusCode)\n# # Resource for /deletesubmission DELETE\n# resourceId_deletesubmission = create_resource(\n#     apiId, root, \"deletesubmission\")\n# httpMethod_deletesubmission = 'DELETE'\n# integrationHttpMethod_deletesubmission = 'DELETE'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "resourceId_rate",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "resourceId_rate = create_resource(apiId, root, \"rate\")\nhttpMethod_rate = 'POST'\nintegrationHttpMethod_rate = 'POST'\nrate_url = service2 + 'rate'\n# # Resource for /getrating GET\nresourceId_getrating = create_resource(apiId, root, \"getrating\")\nhttpMethod_getrating = 'GET'\nintegrationHttpMethod_getrating = 'GET'\ngetrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "httpMethod_rate",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "httpMethod_rate = 'POST'\nintegrationHttpMethod_rate = 'POST'\nrate_url = service2 + 'rate'\n# # Resource for /getrating GET\nresourceId_getrating = create_resource(apiId, root, \"getrating\")\nhttpMethod_getrating = 'GET'\nintegrationHttpMethod_getrating = 'GET'\ngetrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE\n# resourceId_deleteratings = create_resource(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod_rate",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "integrationHttpMethod_rate = 'POST'\nrate_url = service2 + 'rate'\n# # Resource for /getrating GET\nresourceId_getrating = create_resource(apiId, root, \"getrating\")\nhttpMethod_getrating = 'GET'\nintegrationHttpMethod_getrating = 'GET'\ngetrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE\n# resourceId_deleteratings = create_resource(\n#     apiId, root, \"deleteratings\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "rate_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "rate_url = service2 + 'rate'\n# # Resource for /getrating GET\nresourceId_getrating = create_resource(apiId, root, \"getrating\")\nhttpMethod_getrating = 'GET'\nintegrationHttpMethod_getrating = 'GET'\ngetrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE\n# resourceId_deleteratings = create_resource(\n#     apiId, root, \"deleteratings\")\n# httpMethod_deleteratings = 'DELETE'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "resourceId_getrating",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "resourceId_getrating = create_resource(apiId, root, \"getrating\")\nhttpMethod_getrating = 'GET'\nintegrationHttpMethod_getrating = 'GET'\ngetrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE\n# resourceId_deleteratings = create_resource(\n#     apiId, root, \"deleteratings\")\n# httpMethod_deleteratings = 'DELETE'\n# integrationHttpMethod_deleteratings = 'DELETE'\n# deleteratings_url = service2 + 'deleteratings'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "httpMethod_getrating",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "httpMethod_getrating = 'GET'\nintegrationHttpMethod_getrating = 'GET'\ngetrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE\n# resourceId_deleteratings = create_resource(\n#     apiId, root, \"deleteratings\")\n# httpMethod_deleteratings = 'DELETE'\n# integrationHttpMethod_deleteratings = 'DELETE'\n# deleteratings_url = service2 + 'deleteratings'\n# # Create methods and integrations",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod_getrating",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "integrationHttpMethod_getrating = 'GET'\ngetrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE\n# resourceId_deleteratings = create_resource(\n#     apiId, root, \"deleteratings\")\n# httpMethod_deleteratings = 'DELETE'\n# integrationHttpMethod_deleteratings = 'DELETE'\n# deleteratings_url = service2 + 'deleteratings'\n# # Create methods and integrations\nputMethod(apiId, authorizationType, resourceId_rate, httpMethod_rate)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "getrating_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "getrating_url = service2 + 'getrating'\n# # Resource for /deleteratings DELETE\n# resourceId_deleteratings = create_resource(\n#     apiId, root, \"deleteratings\")\n# httpMethod_deleteratings = 'DELETE'\n# integrationHttpMethod_deleteratings = 'DELETE'\n# deleteratings_url = service2 + 'deleteratings'\n# # Create methods and integrations\nputMethod(apiId, authorizationType, resourceId_rate, httpMethod_rate)\nputIntegration(apiId, httpMethod_rate, resourceId_rate,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "resourceId_recomsubmit",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "resourceId_recomsubmit = create_resource(\n    apiId, root, \"recomsubmit\")\nhttpMethod_recomsubmit = 'POST'\nintegrationHttpMethod_recomsubmit = 'POST'\nrecomsubmit_url = service3 + 'recomsubmit'\n# # Resource for /recommends GET\nresourceId_recommends = create_resource(\n    apiId, root, \"recommends\")\nhttpMethod_recommends = 'GET'\nintegrationHttpMethod_recommends = 'GET'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "httpMethod_recomsubmit",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "httpMethod_recomsubmit = 'POST'\nintegrationHttpMethod_recomsubmit = 'POST'\nrecomsubmit_url = service3 + 'recomsubmit'\n# # Resource for /recommends GET\nresourceId_recommends = create_resource(\n    apiId, root, \"recommends\")\nhttpMethod_recommends = 'GET'\nintegrationHttpMethod_recommends = 'GET'\nrecommends_url = service3 + 'recommends'\n# # Resource for /deleterecommendations DELETE",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod_recomsubmit",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "integrationHttpMethod_recomsubmit = 'POST'\nrecomsubmit_url = service3 + 'recomsubmit'\n# # Resource for /recommends GET\nresourceId_recommends = create_resource(\n    apiId, root, \"recommends\")\nhttpMethod_recommends = 'GET'\nintegrationHttpMethod_recommends = 'GET'\nrecommends_url = service3 + 'recommends'\n# # Resource for /deleterecommendations DELETE\n# resourceId_deleterecommendations = create_resource(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "recomsubmit_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "recomsubmit_url = service3 + 'recomsubmit'\n# # Resource for /recommends GET\nresourceId_recommends = create_resource(\n    apiId, root, \"recommends\")\nhttpMethod_recommends = 'GET'\nintegrationHttpMethod_recommends = 'GET'\nrecommends_url = service3 + 'recommends'\n# # Resource for /deleterecommendations DELETE\n# resourceId_deleterecommendations = create_resource(\n#     apiId, root, \"deleterecommendations\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "resourceId_recommends",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "resourceId_recommends = create_resource(\n    apiId, root, \"recommends\")\nhttpMethod_recommends = 'GET'\nintegrationHttpMethod_recommends = 'GET'\nrecommends_url = service3 + 'recommends'\n# # Resource for /deleterecommendations DELETE\n# resourceId_deleterecommendations = create_resource(\n#     apiId, root, \"deleterecommendations\")\n# httpMethod_deleterecommendations = 'DELETE'\n# integrationHttpMethod_deleterecommendations = 'DELETE'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "httpMethod_recommends",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "httpMethod_recommends = 'GET'\nintegrationHttpMethod_recommends = 'GET'\nrecommends_url = service3 + 'recommends'\n# # Resource for /deleterecommendations DELETE\n# resourceId_deleterecommendations = create_resource(\n#     apiId, root, \"deleterecommendations\")\n# httpMethod_deleterecommendations = 'DELETE'\n# integrationHttpMethod_deleterecommendations = 'DELETE'\n# deleterecommendations_url = service3 + 'deleterecommendations'\n# # Create methods and integrations",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod_recommends",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "integrationHttpMethod_recommends = 'GET'\nrecommends_url = service3 + 'recommends'\n# # Resource for /deleterecommendations DELETE\n# resourceId_deleterecommendations = create_resource(\n#     apiId, root, \"deleterecommendations\")\n# httpMethod_deleterecommendations = 'DELETE'\n# integrationHttpMethod_deleterecommendations = 'DELETE'\n# deleterecommendations_url = service3 + 'deleterecommendations'\n# # Create methods and integrations\nputMethod(apiId, authorizationType,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "recommends_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "recommends_url = service3 + 'recommends'\n# # Resource for /deleterecommendations DELETE\n# resourceId_deleterecommendations = create_resource(\n#     apiId, root, \"deleterecommendations\")\n# httpMethod_deleterecommendations = 'DELETE'\n# integrationHttpMethod_deleterecommendations = 'DELETE'\n# deleterecommendations_url = service3 + 'deleterecommendations'\n# # Create methods and integrations\nputMethod(apiId, authorizationType,\n          resourceId_recomsubmit, httpMethod_recomsubmit)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "peekOfCode": "url = \"https://\"+apiId+\".execute-api.ap-south-1.amazonaws.com/\"+stageName+'/'\nprint(f\"Deployment endpoint for {stageName} : {url}\")\n# https://ye5o3aa9yf.execute-api.ap-south-1.amazonaws.com/dev/",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.APIGATEWAY",
        "documentation": {}
    },
    {
        "label": "create_api",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def create_api(name,description,version,types):\n    response = client.create_rest_api(\n        name=name,\n        description=description,\n        version=version,\n        endpointConfiguration={'types': [types]}\n    )\n    return response['id']\ndef create_resource(apiId,parentId,pathPart):\n    response=client.create_resource(",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "create_resource",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def create_resource(apiId,parentId,pathPart):\n    response=client.create_resource(\n        restApiId=apiId,\n        parentId=parentId,\n        pathPart=pathPart\n    )\n    return response['id']\ndef get_parent_id(apiId,parent_resource_path):\n    response = client.get_resources(\n        restApiId=apiId,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "get_parent_id",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def get_parent_id(apiId,parent_resource_path):\n    response = client.get_resources(\n        restApiId=apiId,\n        limit=500  # Adjust the limit as needed to list all resources\n    )\n    parent_resource_id=''\n    # Iterate through the resources to find the parent resource\n    for resource in response['items']:\n        if resource['path'] == parent_resource_path:\n            parent_resource_id = resource['id']",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "putMethod",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def putMethod(apiId,authorizationType,resourceId,httpMethod): \n    client.put_method(\n        restApiId=apiId,\n        authorizationType=authorizationType,\n        resourceId=resourceId,  \n        httpMethod=httpMethod,\n    )\ndef putIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,url):    \n    client.put_integration(\n        restApiId=apiId,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "putIntegration",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def putIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,url):    \n    client.put_integration(\n        restApiId=apiId,\n        resourceId=resourceId,  \n        httpMethod=httpMethod,\n        type=type,\n        integrationHttpMethod=integrationHttpMethod,\n        uri=url\n    )\ndef put_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "put_method_response",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def put_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model):\n    client.put_method_response(\n        restApiId=apiId,\n        resourceId=resourceId,\n        httpMethod=httpMethod,\n        statusCode=statusCode,\n        responseModels={\n            contentType: Model,\n        }\n    ) ",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "put_integration_response",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def put_integration_response(apiId,resourceId,httpMethod,statusCode):\n    client.put_integration_response(\n        restApiId=apiId,\n        resourceId=resourceId,\n        httpMethod=httpMethod,\n        statusCode=statusCode,\n    )\ndef create_deployement(apiId,stageName):\n    client.create_deployment(\n        restApiId=apiId,",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "create_deployement",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "def create_deployement(apiId,stageName):\n    client.create_deployment(\n        restApiId=apiId,\n        stageName=stageName,\n    )\n    print(\"Stage Deployed successfully...\")\nname='portfolio'\ndescription='Gateway for microservies in portfolio'\nversion='v-1'\nendpointConfigurationType='EDGE'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "client = boto3.client('apigateway')\ndef create_api(name,description,version,types):\n    response = client.create_rest_api(\n        name=name,\n        description=description,\n        version=version,\n        endpointConfiguration={'types': [types]}\n    )\n    return response['id']\ndef create_resource(apiId,parentId,pathPart):",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "contentType",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "contentType = 'application/json'\nModel='Empty'\nstageName='dev'\nfeedback_url = 'http://ec2-3-6-37-213.ap-south-1.compute.amazonaws.com'\nrating_url = 'http://ec2-65-1-131-189.ap-south-1.compute.amazonaws.com'\nsubscription_url = 'http://ec2-52-66-20-54.ap-south-1.compute.amazonaws.com'\n# ***************************************************************\n#                     / GET\n# ***************************************************************\nprint(\"started creating Api Gateway...\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "feedback_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "feedback_url = 'http://ec2-3-6-37-213.ap-south-1.compute.amazonaws.com'\nrating_url = 'http://ec2-65-1-131-189.ap-south-1.compute.amazonaws.com'\nsubscription_url = 'http://ec2-52-66-20-54.ap-south-1.compute.amazonaws.com'\n# ***************************************************************\n#                     / GET\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\napiId=create_api(name,description,version,endpointConfigurationType)\nresourceId=get_parent_id(apiId,'/')\nroot_resourceId=resourceId",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "rating_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "rating_url = 'http://ec2-65-1-131-189.ap-south-1.compute.amazonaws.com'\nsubscription_url = 'http://ec2-52-66-20-54.ap-south-1.compute.amazonaws.com'\n# ***************************************************************\n#                     / GET\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\napiId=create_api(name,description,version,endpointConfigurationType)\nresourceId=get_parent_id(apiId,'/')\nroot_resourceId=resourceId\n# putMethod(apiId,authorizationType,resourceId,httpMethod)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "subscription_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "subscription_url = 'http://ec2-52-66-20-54.ap-south-1.compute.amazonaws.com'\n# ***************************************************************\n#                     / GET\n# ***************************************************************\nprint(\"started creating Api Gateway...\")\napiId=create_api(name,description,version,endpointConfigurationType)\nresourceId=get_parent_id(apiId,'/')\nroot_resourceId=resourceId\n# putMethod(apiId,authorizationType,resourceId,httpMethod)\n# putIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,feedback_url)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "resourceId",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "resourceId = create_resource(apiId, root_resourceId, \"submissions\")\n# resourceId=create_resource(apiId,resourceId,\"{post+}\")\nhttpMethod='GET'\nintegrationHttpMethod='GET'\nfeedback_get_url = feedback_url+'/submissions'\ntype='HTTP'\nputMethod(apiId,authorizationType,resourceId,httpMethod)\nputIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,feedback_get_url)\nput_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model)\nput_integration_response(apiId,resourceId,httpMethod,statusCode)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "feedback_get_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "feedback_get_url = feedback_url+'/submissions'\ntype='HTTP'\nputMethod(apiId,authorizationType,resourceId,httpMethod)\nputIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,feedback_get_url)\nput_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model)\nput_integration_response(apiId,resourceId,httpMethod,statusCode)\nprint(\"successfully created /feedback GET method...\")\n# ***************************************************************\n#                     /feedback POST\n# ***************************************************************",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "feedback_post_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "feedback_post_url = feedback_url+'/submit'\ntype='HTTP'\nputMethod(apiId,authorizationType,resourceId,httpMethod)\nputIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,feedback_post_url)\nput_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model)\nput_integration_response(apiId,resourceId,httpMethod,statusCode)\nprint(\"successfully created /feedback POST method...\")\n# # ***************************************************************\n# #                     / rating GET\n# # ***************************************************************",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "rating_api_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "rating_api_url = rating_url+\"/rating\"\nputMethod(apiId,authorizationType,resourceId,httpMethod)\nputIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,rating_api_url)\nput_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model)\nput_integration_response(apiId,resourceId,httpMethod,statusCode)\nprint(\"successfully created /rating GET method...\")\n# # ***************************************************************\n# #                     /rating POST\n# # ***************************************************************\n# feedback_resourceId=resourceId",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "rating_api_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "rating_api_url = rating_url+\"/rate\"\nputMethod(apiId,authorizationType,resourceId,httpMethod)\nputIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,rating_api_url)\nput_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model)\nput_integration_response(apiId,resourceId,httpMethod,statusCode)\nprint(\"successfully created /feedback/api POST method...\")\n# # ***************************************************************\n# #                     / subscription POST\n# # ***************************************************************\nresourceId = create_resource(apiId, root_resourceId, \"recomsubmit\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "resourceId",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "resourceId = create_resource(apiId, root_resourceId, \"recomsubmit\")\nhttpMethod='POST'\nintegrationHttpMethod=\"POST\"\ntype='HTTP'\nsub_api_url = subscription_url+\"/recomsubmit\"\nputMethod(apiId,authorizationType,resourceId,httpMethod)\nputIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,sub_api_url)\nput_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model)\nput_integration_response(apiId,resourceId,httpMethod,statusCode)\nprint(\"successfully created /feedback/post POST method...\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "sub_api_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "sub_api_url = subscription_url+\"/recomsubmit\"\nputMethod(apiId,authorizationType,resourceId,httpMethod)\nputIntegration(apiId,httpMethod,resourceId,type,integrationHttpMethod,sub_api_url)\nput_method_response(apiId,resourceId,httpMethod,statusCode,contentType,Model)\nput_integration_response(apiId,resourceId,httpMethod,statusCode)\nprint(\"successfully created /feedback/post POST method...\")\n# # ***************************************************************\n# #                     / message GET\n# # ***************************************************************\nhttpMethod = 'GET'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "httpMethod",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "httpMethod = 'GET'\nintegrationHttpMethod = \"GET\"\ntype = 'HTTP'\nsub_api_url = rating_url+\"/recommends\"\nputMethod(apiId, authorizationType, resourceId, httpMethod)\nputIntegration(apiId, httpMethod, resourceId, type,\n               integrationHttpMethod, sub_api_url)\nput_method_response(apiId, resourceId, httpMethod,\n                    statusCode, contentType, Model)\nput_integration_response(apiId, resourceId, httpMethod, statusCode)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "integrationHttpMethod",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "integrationHttpMethod = \"GET\"\ntype = 'HTTP'\nsub_api_url = rating_url+\"/recommends\"\nputMethod(apiId, authorizationType, resourceId, httpMethod)\nputIntegration(apiId, httpMethod, resourceId, type,\n               integrationHttpMethod, sub_api_url)\nput_method_response(apiId, resourceId, httpMethod,\n                    statusCode, contentType, Model)\nput_integration_response(apiId, resourceId, httpMethod, statusCode)\nprint(\"successfully created /rating GET method...\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "type",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "type = 'HTTP'\nsub_api_url = rating_url+\"/recommends\"\nputMethod(apiId, authorizationType, resourceId, httpMethod)\nputIntegration(apiId, httpMethod, resourceId, type,\n               integrationHttpMethod, sub_api_url)\nput_method_response(apiId, resourceId, httpMethod,\n                    statusCode, contentType, Model)\nput_integration_response(apiId, resourceId, httpMethod, statusCode)\nprint(\"successfully created /rating GET method...\")\n# resourceId=create_resource(apiId,root_resourceId,\"message\")",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "sub_api_url",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "peekOfCode": "sub_api_url = rating_url+\"/recommends\"\nputMethod(apiId, authorizationType, resourceId, httpMethod)\nputIntegration(apiId, httpMethod, resourceId, type,\n               integrationHttpMethod, sub_api_url)\nput_method_response(apiId, resourceId, httpMethod,\n                    statusCode, contentType, Model)\nput_integration_response(apiId, resourceId, httpMethod, statusCode)\nprint(\"successfully created /rating GET method...\")\n# resourceId=create_resource(apiId,root_resourceId,\"message\")\n# httpMethod='GET'",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab8.create_gateway",
        "documentation": {}
    },
    {
        "label": "find_candidate",
        "kind": 2,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.mapper",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.mapper",
        "peekOfCode": "def find_candidate(point: numpy.ndarray):\n    distance1 = numpy.dot(point.T, candidate_points[\"iris_sertosa\"])\n    distance2 = numpy.dot(point.T, candidate_points[\"iris_versicolor\"])\n    distance3 = numpy.dot(point.T, candidate_points[\"iris_virginica\"])\n    min_distance = min(distance1, distance2, distance3)\n    if distance1 == min_distance:\n        return \"iris_sertosa\"\n    elif distance2 == min_distance:\n        return \"iris_versicolor\"\n    elif distance3 == min_distance:",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.mapper",
        "documentation": {}
    },
    {
        "label": "candidate_points",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.mapper",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.mapper",
        "peekOfCode": "candidate_points = {\n    \"iris_sertosa\": numpy.array([5.8, 8.0, 1.2, 0.2]),\n    \"iris_versicolor\": numpy.array([6.1, 2.8, 4.0, 1.3]),\n    \"iris_virginica\": numpy.array([6.3, 2.7, 4.9, 1.8]),\n}\ndef find_candidate(point: numpy.ndarray):\n    distance1 = numpy.dot(point.T, candidate_points[\"iris_sertosa\"])\n    distance2 = numpy.dot(point.T, candidate_points[\"iris_versicolor\"])\n    distance3 = numpy.dot(point.T, candidate_points[\"iris_virginica\"])\n    min_distance = min(distance1, distance2, distance3)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.mapper",
        "documentation": {}
    },
    {
        "label": "all_species",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "peekOfCode": "all_species = [\"iris_sertosa\", \"iris_versicolor\", \"iris_virginica\"]\ncounts = {\n    \"iris_sertosa\": 0,\n    \"iris_versicolor\": 0,\n    \"iris_virginica\": 0,\n}\nsums = {\n    \"iris_sertosa\": numpy.array([0.0] * 4),\n    \"iris_versicolor\": numpy.array([0.0] * 4),\n    \"iris_virginica\": numpy.array([0.0] * 4),",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "peekOfCode": "counts = {\n    \"iris_sertosa\": 0,\n    \"iris_versicolor\": 0,\n    \"iris_virginica\": 0,\n}\nsums = {\n    \"iris_sertosa\": numpy.array([0.0] * 4),\n    \"iris_versicolor\": numpy.array([0.0] * 4),\n    \"iris_virginica\": numpy.array([0.0] * 4),\n}",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "documentation": {}
    },
    {
        "label": "sums",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "peekOfCode": "sums = {\n    \"iris_sertosa\": numpy.array([0.0] * 4),\n    \"iris_versicolor\": numpy.array([0.0] * 4),\n    \"iris_virginica\": numpy.array([0.0] * 4),\n}\nfor line in sys.stdin:\n    species, point = line.strip().split(\"\\t\")\n    point = numpy.array(list(map(float, point.strip().split(\",\"))))\n    counts[species] += 1\n    sums[species] += point",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "documentation": {}
    },
    {
        "label": "candidate_points",
        "kind": 5,
        "importPath": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "description": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "peekOfCode": "candidate_points = {\n    \"iris_sertosa\": numpy.array([5.8, 8.0, 1.2, 0.2]),\n    \"iris_versicolor\": numpy.array([6.1, 2.8, 4.0, 1.3]),\n    \"iris_virginica\": numpy.array([6.3, 2.7, 4.9, 1.8]),\n}\nfor species in all_species:\n    if counts[species] != 0:\n        candidate_points[species] = sums[species] / counts[species]\npprint(candidate_points)",
        "detail": "Labs.semester 5.IT-Workshop (Cloud Computing).2101227_Lab9.Q3.reducer",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Labs.semester 5.Machine-Learning.MLProject.app",
        "description": "Labs.semester 5.Machine-Learning.MLProject.app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/predict', methods=['POST'])\ndef predict():\n    if request.method == 'POST':\n        age = int(request.form['age'])\n        bmi = float(request.form['bmi'])\n        children = int(request.form['children'])\n        gender = int(request.form['gender'])\n        smoker = int(request.form['smoker'])",
        "detail": "Labs.semester 5.Machine-Learning.MLProject.app",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "Labs.semester 5.Machine-Learning.MLProject.app",
        "description": "Labs.semester 5.Machine-Learning.MLProject.app",
        "peekOfCode": "def predict():\n    if request.method == 'POST':\n        age = int(request.form['age'])\n        bmi = float(request.form['bmi'])\n        children = int(request.form['children'])\n        gender = int(request.form['gender'])\n        smoker = int(request.form['smoker'])\n        region = request.form['region']\n        r1=0\n        r2=0",
        "detail": "Labs.semester 5.Machine-Learning.MLProject.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Labs.semester 5.Machine-Learning.MLProject.app",
        "description": "Labs.semester 5.Machine-Learning.MLProject.app",
        "peekOfCode": "app = Flask(__name__)\n# model_path = os.path.abspath('./model/premium_prediction_model.pkl')\n# model_load = joblib.load(model_path)\nmodel_load = joblib.load('./model/premium_prediction_model.pkl')\n# model_load = joblib.load(\"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\college1\\\\Labs\\\\semester 5\\\\Machine Learning\\\\mp\\\\model\\\\premium_prediction_model.pkl\")\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/predict', methods=['POST'])\ndef predict():",
        "detail": "Labs.semester 5.Machine-Learning.MLProject.app",
        "documentation": {}
    },
    {
        "label": "model_load",
        "kind": 5,
        "importPath": "Labs.semester 5.Machine-Learning.MLProject.app",
        "description": "Labs.semester 5.Machine-Learning.MLProject.app",
        "peekOfCode": "model_load = joblib.load('./model/premium_prediction_model.pkl')\n# model_load = joblib.load(\"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\college1\\\\Labs\\\\semester 5\\\\Machine Learning\\\\mp\\\\model\\\\premium_prediction_model.pkl\")\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/predict', methods=['POST'])\ndef predict():\n    if request.method == 'POST':\n        age = int(request.form['age'])\n        bmi = float(request.form['bmi'])",
        "detail": "Labs.semester 5.Machine-Learning.MLProject.app",
        "documentation": {}
    }
]